/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// ../../node_modules/@rocicorp/logger/out/logger.js
var TeeLogSink = class {
  constructor(sinks) {
    this._sinks = sinks;
  }
  log(level, context, ...args) {
    for (const logger of this._sinks) {
      logger.log(level, context, ...args);
    }
  }
  async flush() {
    await Promise.all(this._sinks.map((logger) => {
      var _a45;
      return (_a45 = logger.flush) == null ? void 0 : _a45.call(logger);
    }));
  }
};
var OptionalLoggerImpl = class {
  constructor(logSink, level = "info", context) {
    this.debug = void 0;
    this.info = void 0;
    this.error = void 0;
    const impl = (level2) => (...args) => logSink.log(level2, context, ...args);
    switch (level) {
      case "debug":
        this.debug = impl("debug");
      case "info":
        this.info = impl("info");
      case "error":
        this.error = impl("error");
    }
    this.flush = () => {
      var _a45, _b2;
      return (_b2 = (_a45 = logSink.flush) == null ? void 0 : _a45.call(logSink)) != null ? _b2 : Promise.resolve();
    };
  }
};
var consoleLogSink = {
  log(level, context, ...args) {
    console[level](...stringified(context), ...args.map(normalizeArgument));
  }
};
var LogContext = class extends OptionalLoggerImpl {
  constructor(level = "info", context, logSink = consoleLogSink) {
    super(logSink, level, context);
    this._level = level;
    this._logSink = logSink;
    this._context = context;
  }
  /**
   * Creates a new Logger that with the given key and value
   * added to the logged Context.
   */
  withContext(key, value) {
    const ctx = { ...this._context, [key]: value };
    return new LogContext(this._level, ctx, this._logSink);
  }
};
function stringified(context) {
  const args = [];
  for (const [k2, v2] of Object.entries(context != null ? context : {})) {
    const arg = v2 === void 0 ? k2 : `${k2}=${v2}`;
    args.push(arg);
  }
  return args;
}
function normalizeArgument(v2) {
  switch (typeof v2) {
    case "string":
    case "number":
    case "boolean":
    case "undefined":
    case "symbol":
    case "bigint":
      return v2;
    case "object":
      if (v2 === null) {
        return null;
      }
      break;
  }
  return JSON.stringify(v2, errorReplacer);
}
function errorReplacer(_key, v2) {
  if (v2 instanceof Error) {
    return {
      name: v2.name,
      message: v2.message,
      stack: v2.stack,
      ..."cause" in v2 ? { cause: v2.cause } : null
    };
  }
  return v2;
}

// ../../node_modules/@rocicorp/resolver/out/resolver.js
function resolver() {
  let resolve;
  let reject;
  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return { promise, resolve, reject };
}

// ../../node_modules/@rocicorp/lock/out/lock.js
var Lock = class {
  constructor() {
    __publicField(this, "_lockP", null);
  }
  async lock() {
    const previous = this._lockP;
    const { promise, resolve } = resolver();
    this._lockP = promise;
    await previous;
    return resolve;
  }
  withLock(f) {
    return run(this.lock(), f);
  }
};
var RWLock = class {
  constructor() {
    __publicField(this, "_lock", new Lock());
    __publicField(this, "_writeP", null);
    __publicField(this, "_readP", []);
  }
  read() {
    return this._lock.withLock(async () => {
      await this._writeP;
      const { promise, resolve } = resolver();
      this._readP.push(promise);
      return resolve;
    });
  }
  withRead(f) {
    return run(this.read(), f);
  }
  async write() {
    return await this._lock.withLock(async () => {
      await this._writeP;
      await Promise.all(this._readP);
      const { promise, resolve } = resolver();
      this._writeP = promise;
      this._readP = [];
      return resolve;
    });
  }
  withWrite(f) {
    return run(this.write(), f);
  }
};
async function run(p, f) {
  const release = await p;
  try {
    return await f();
  } finally {
    release();
  }
}

// ../../node_modules/@badrap/valita/dist/mjs/index.mjs
var mjs_exports = {};
__export(mjs_exports, {
  ValitaError: () => ValitaError,
  array: () => array,
  bigint: () => bigint,
  boolean: () => boolean,
  err: () => err,
  lazy: () => lazy,
  literal: () => literal,
  never: () => never,
  null: () => null_,
  number: () => number,
  object: () => object,
  ok: () => ok,
  record: () => record,
  string: () => string,
  tuple: () => tuple,
  undefined: () => undefined_,
  union: () => union,
  unknown: () => unknown
});
function joinIssues(left, right) {
  return left ? { ok: false, code: "join", left, right } : right;
}
function prependPath(key, tree) {
  return { ok: false, code: "prepend", key, tree };
}
function cloneIssueWithPath(tree, path) {
  const code = tree.code;
  switch (code) {
    case "invalid_type":
      return { code, path, expected: tree.expected };
    case "invalid_literal":
      return { code, path, expected: tree.expected };
    case "missing_value":
      return { code, path };
    case "invalid_length":
      return {
        code,
        path,
        minLength: tree.minLength,
        maxLength: tree.maxLength
      };
    case "unrecognized_keys":
      return { code, path, keys: tree.keys };
    case "invalid_union":
      return { code, path, tree: tree.tree };
    default:
      return { code, path, error: tree.error };
  }
}
function collectIssues(tree, path = [], issues = []) {
  for (; ; ) {
    if (tree.code === "join") {
      collectIssues(tree.left, path.slice(), issues);
      tree = tree.right;
    } else if (tree.code === "prepend") {
      path.push(tree.key);
      tree = tree.tree;
    } else {
      if (tree.code === "custom_error" && typeof tree.error === "object" && tree.error.path !== void 0) {
        path.push(...tree.error.path);
      }
      issues.push(cloneIssueWithPath(tree, path));
      return issues;
    }
  }
}
function separatedList(list, sep) {
  if (list.length === 0) {
    return "nothing";
  } else if (list.length === 1) {
    return list[0];
  } else {
    return `${list.slice(0, -1).join(", ")} ${sep} ${list[list.length - 1]}`;
  }
}
function formatLiteral(value) {
  return typeof value === "bigint" ? `${value}n` : JSON.stringify(value);
}
function countIssues(tree) {
  let count = 0;
  for (; ; ) {
    if (tree.code === "join") {
      count += countIssues(tree.left);
      tree = tree.right;
    } else if (tree.code === "prepend") {
      tree = tree.tree;
    } else {
      return count + 1;
    }
  }
}
function formatIssueTree(tree) {
  let path = "";
  let count = 0;
  for (; ; ) {
    if (tree.code === "join") {
      count += countIssues(tree.right);
      tree = tree.left;
    } else if (tree.code === "prepend") {
      path += "." + tree.key;
      tree = tree.tree;
    } else {
      break;
    }
  }
  let message = "validation failed";
  if (tree.code === "invalid_type") {
    message = `expected ${separatedList(tree.expected, "or")}`;
  } else if (tree.code === "invalid_literal") {
    message = `expected ${separatedList(tree.expected.map(formatLiteral), "or")}`;
  } else if (tree.code === "missing_value") {
    message = `missing value`;
  } else if (tree.code === "unrecognized_keys") {
    const keys = tree.keys;
    message = `unrecognized ${keys.length === 1 ? "key" : "keys"} ${separatedList(keys.map(formatLiteral), "and")}`;
  } else if (tree.code === "invalid_length") {
    const min = tree.minLength;
    const max = tree.maxLength;
    message = `expected an array with `;
    if (min > 0) {
      if (max === min) {
        message += `${min}`;
      } else if (max < Infinity) {
        message += `between ${min} and ${max}`;
      } else {
        message += `at least ${min}`;
      }
    } else {
      message += `at most ${max}`;
    }
    message += ` item(s)`;
  } else if (tree.code === "custom_error") {
    const error = tree.error;
    if (typeof error === "string") {
      message = error;
    } else if (error !== void 0) {
      if (error.message !== void 0) {
        message = error.message;
      }
      if (error.path !== void 0) {
        path += "." + error.path.join(".");
      }
    }
  }
  let msg = `${tree.code} at .${path.slice(1)} (${message})`;
  if (count === 1) {
    msg += ` (+ 1 other issue)`;
  } else if (count > 1) {
    msg += ` (+ ${count} other issues)`;
  }
  return msg;
}
var ValitaError = class extends Error {
  constructor(issueTree) {
    super(formatIssueTree(issueTree));
    this.issueTree = issueTree;
    Object.setPrototypeOf(this, new.target.prototype);
    this.name = new.target.name;
    this._issues = void 0;
  }
  get issues() {
    if (this._issues === void 0) {
      this._issues = collectIssues(this.issueTree);
    }
    return this._issues;
  }
};
var ErrImpl = class {
  constructor(issueTree) {
    this.issueTree = issueTree;
    this.ok = false;
    this._issues = void 0;
    this._message = void 0;
  }
  get issues() {
    if (this._issues === void 0) {
      this._issues = collectIssues(this.issueTree);
    }
    return this._issues;
  }
  get message() {
    if (this._message === void 0) {
      this._message = formatIssueTree(this.issueTree);
    }
    return this._message;
  }
  throw() {
    throw new ValitaError(this.issueTree);
  }
};
function ok(value) {
  return { ok: true, value };
}
function err(error) {
  return new ErrImpl({ ok: false, code: "custom_error", error });
}
function isObject(v2) {
  return typeof v2 === "object" && v2 !== null && !Array.isArray(v2);
}
var FLAG_FORBID_EXTRA_KEYS = 1;
var FLAG_STRIP_EXTRA_KEYS = 2;
var FLAG_MISSING_VALUE = 4;
var AbstractType = class {
  optional() {
    return new Optional(this);
  }
  default(defaultValue) {
    const defaultResult = ok(defaultValue);
    return new TransformType(this.optional(), (v2) => {
      return v2 === void 0 ? defaultResult : void 0;
    });
  }
  assert(func, error) {
    const err2 = { ok: false, code: "custom_error", error };
    return new TransformType(this, (v2, options) => func(v2, options) ? void 0 : err2);
  }
  map(func) {
    return new TransformType(this, (v2, options) => ({
      ok: true,
      value: func(v2, options)
    }));
  }
  chain(func) {
    return new TransformType(this, (v2, options) => {
      const r = func(v2, options);
      return r.ok ? r : r.issueTree;
    });
  }
};
var Type = class extends AbstractType {
  /**
   * Return new validator that accepts both the original type and `null`.
   */
  nullable() {
    return new Nullable(this);
  }
  toTerminals(func) {
    func(this);
  }
  /**
   * Parse a value without throwing.
   */
  try(v2, options) {
    let flags = FLAG_FORBID_EXTRA_KEYS;
    if ((options === null || options === void 0 ? void 0 : options.mode) === "passthrough") {
      flags = 0;
    } else if ((options === null || options === void 0 ? void 0 : options.mode) === "strip") {
      flags = FLAG_STRIP_EXTRA_KEYS;
    }
    const r = this.func(v2, flags);
    if (r === void 0) {
      return { ok: true, value: v2 };
    } else if (r.ok) {
      return { ok: true, value: r.value };
    } else {
      return new ErrImpl(r);
    }
  }
  /**
   * Parse a value. Throw a ValitaError on failure.
   */
  parse(v2, options) {
    let flags = FLAG_FORBID_EXTRA_KEYS;
    if ((options === null || options === void 0 ? void 0 : options.mode) === "passthrough") {
      flags = 0;
    } else if ((options === null || options === void 0 ? void 0 : options.mode) === "strip") {
      flags = FLAG_STRIP_EXTRA_KEYS;
    }
    const r = this.func(v2, flags);
    if (r === void 0) {
      return v2;
    } else if (r.ok) {
      return r.value;
    } else {
      throw new ValitaError(r);
    }
  }
};
var Nullable = class extends Type {
  constructor(type) {
    super();
    this.type = type;
    this.name = "nullable";
  }
  func(v2, flags) {
    return v2 === null ? void 0 : this.type.func(v2, flags);
  }
  toTerminals(func) {
    func(nullSingleton);
    this.type.toTerminals(func);
  }
  nullable() {
    return this;
  }
};
var Optional = class extends AbstractType {
  constructor(type) {
    super();
    this.type = type;
    this.name = "optional";
  }
  func(v2, flags) {
    return v2 === void 0 || flags & FLAG_MISSING_VALUE ? void 0 : this.type.func(v2, flags);
  }
  toTerminals(func) {
    func(this);
    func(undefinedSingleton);
    this.type.toTerminals(func);
  }
  optional() {
    return this;
  }
};
function setBit(bits, index) {
  if (typeof bits !== "number") {
    const idx = index >> 5;
    for (let i = bits.length; i <= idx; i++) {
      bits.push(0);
    }
    bits[idx] |= 1 << index % 32;
    return bits;
  } else if (index < 32) {
    return bits | 1 << index;
  } else {
    return setBit([bits, 0], index);
  }
}
function getBit(bits, index) {
  if (typeof bits === "number") {
    return index < 32 ? bits >>> index & 1 : 0;
  } else {
    return bits[index >> 5] >>> index % 32 & 1;
  }
}
var ObjectType = class extends Type {
  constructor(shape, restType, checks) {
    super();
    this.shape = shape;
    this.restType = restType;
    this.checks = checks;
    this.name = "object";
  }
  check(func, error) {
    var _a45;
    const issue = { ok: false, code: "custom_error", error };
    return new ObjectType(this.shape, this.restType, [
      ...(_a45 = this.checks) !== null && _a45 !== void 0 ? _a45 : [],
      {
        func,
        issue
      }
    ]);
  }
  func(v2, flags) {
    let func = this._func;
    if (func === void 0) {
      func = createObjectMatcher(this.shape, this.restType, this.checks);
      this._func = func;
    }
    return func(v2, flags);
  }
  rest(restType) {
    return new ObjectType(this.shape, restType);
  }
  extend(shape) {
    return new ObjectType(Object.assign(Object.assign({}, this.shape), shape), this.restType);
  }
  pick(...keys) {
    const shape = {};
    keys.forEach((key) => {
      shape[key] = this.shape[key];
    });
    return new ObjectType(shape, void 0);
  }
  omit(...keys) {
    const shape = Object.assign({}, this.shape);
    keys.forEach((key) => {
      delete shape[key];
    });
    return new ObjectType(shape, this.restType);
  }
  partial() {
    var _a45;
    const shape = {};
    Object.keys(this.shape).forEach((key) => {
      shape[key] = this.shape[key].optional();
    });
    const rest = (_a45 = this.restType) === null || _a45 === void 0 ? void 0 : _a45.optional();
    return new ObjectType(shape, rest);
  }
};
function createObjectMatcher(shape, rest, checks) {
  const requiredKeys = [];
  const optionalKeys = [];
  for (const key in shape) {
    let hasOptional = false;
    shape[key].toTerminals((t) => {
      hasOptional || (hasOptional = t.name === "optional");
    });
    if (hasOptional) {
      optionalKeys.push(key);
    } else {
      requiredKeys.push(key);
    }
  }
  const keys = [...requiredKeys, ...optionalKeys];
  const totalCount = keys.length;
  const invalidType = {
    ok: false,
    code: "invalid_type",
    expected: ["object"]
  };
  if (totalCount === 0 && (rest === null || rest === void 0 ? void 0 : rest.name) === "unknown") {
    return function(obj, _2) {
      if (!isObject(obj)) {
        return invalidType;
      }
      if (checks !== void 0) {
        for (let i = 0; i < checks.length; i++) {
          if (!checks[i].func(obj)) {
            return checks[i].issue;
          }
        }
      }
      return void 0;
    };
  }
  const types = keys.map((key) => shape[key]);
  const requiredCount = requiredKeys.length;
  const invertedIndexes = /* @__PURE__ */ Object.create(null);
  keys.forEach((key, index) => {
    invertedIndexes[key] = ~index;
  });
  const missingValues = requiredKeys.map((key) => prependPath(key, {
    ok: false,
    code: "missing_value"
  }));
  function set(obj, key, value) {
    if (key === "__proto__") {
      Object.defineProperty(obj, key, {
        value,
        writable: true,
        enumerable: true,
        configurable: true
      });
    } else {
      obj[key] = value;
    }
  }
  return function(obj, flags) {
    if (!isObject(obj)) {
      return invalidType;
    }
    let copied = false;
    let output = obj;
    let issues;
    let unrecognized = void 0;
    let seenBits = 0;
    let seenCount = 0;
    if (flags & FLAG_FORBID_EXTRA_KEYS || flags & FLAG_STRIP_EXTRA_KEYS || rest !== void 0) {
      for (const key in obj) {
        const value = obj[key];
        const index = ~invertedIndexes[key];
        let r;
        if (index >= 0) {
          seenCount++;
          seenBits = setBit(seenBits, index);
          r = types[index].func(value, flags);
        } else if (rest !== void 0) {
          r = rest.func(value, flags);
        } else {
          if (flags & FLAG_FORBID_EXTRA_KEYS) {
            if (unrecognized === void 0) {
              unrecognized = [key];
            } else {
              unrecognized.push(key);
            }
          } else if (flags & FLAG_STRIP_EXTRA_KEYS && issues === void 0 && !copied) {
            output = {};
            copied = true;
            for (let m = 0; m < totalCount; m++) {
              if (getBit(seenBits, m)) {
                const k2 = keys[m];
                set(output, k2, obj[k2]);
              }
            }
          }
          continue;
        }
        if (r === void 0) {
          if (copied && issues === void 0) {
            set(output, key, value);
          }
        } else if (!r.ok) {
          issues = joinIssues(issues, prependPath(key, r));
        } else if (issues === void 0) {
          if (!copied) {
            output = {};
            copied = true;
            if (rest === void 0) {
              for (let m = 0; m < totalCount; m++) {
                if (m !== index && getBit(seenBits, m)) {
                  const k2 = keys[m];
                  set(output, k2, obj[k2]);
                }
              }
            } else {
              for (const k2 in obj) {
                set(output, k2, obj[k2]);
              }
            }
          }
          set(output, key, r.value);
        }
      }
    }
    if (seenCount < totalCount) {
      for (let i = 0; i < totalCount; i++) {
        if (getBit(seenBits, i)) {
          continue;
        }
        const key = keys[i];
        const value = obj[key];
        let keyFlags = flags & ~FLAG_MISSING_VALUE;
        if (value === void 0 && !(key in obj)) {
          if (i < requiredCount) {
            issues = joinIssues(issues, missingValues[i]);
            continue;
          }
          keyFlags |= FLAG_MISSING_VALUE;
        }
        const r = types[i].func(value, keyFlags);
        if (r === void 0) {
          if (copied && issues === void 0 && !(keyFlags & FLAG_MISSING_VALUE)) {
            set(output, key, value);
          }
        } else if (!r.ok) {
          issues = joinIssues(issues, prependPath(key, r));
        } else if (issues === void 0) {
          if (!copied) {
            output = {};
            copied = true;
            if (rest === void 0) {
              for (let m = 0; m < totalCount; m++) {
                if (m < i || getBit(seenBits, m)) {
                  const k2 = keys[m];
                  set(output, k2, obj[k2]);
                }
              }
            } else {
              for (const k2 in obj) {
                set(output, k2, obj[k2]);
              }
              for (let m = 0; m < i; m++) {
                if (!getBit(seenBits, m)) {
                  const k2 = keys[m];
                  set(output, k2, obj[k2]);
                }
              }
            }
          }
          set(output, key, r.value);
        }
      }
    }
    if (unrecognized !== void 0) {
      issues = joinIssues(issues, {
        ok: false,
        code: "unrecognized_keys",
        keys: unrecognized
      });
    }
    if (issues === void 0 && checks !== void 0) {
      for (let i = 0; i < checks.length; i++) {
        if (!checks[i].func(output)) {
          return checks[i].issue;
        }
      }
    }
    if (issues === void 0 && copied) {
      return { ok: true, value: output };
    } else {
      return issues;
    }
  };
}
var ArrayType = class extends Type {
  constructor(head, rest) {
    super();
    this.head = head;
    this.name = "array";
    this.rest = rest !== null && rest !== void 0 ? rest : never();
    this.minLength = this.head.length;
    this.maxLength = rest ? Infinity : this.minLength;
    this.invalidType = {
      ok: false,
      code: "invalid_type",
      expected: ["array"]
    };
    this.invalidLength = {
      ok: false,
      code: "invalid_length",
      minLength: this.minLength,
      maxLength: this.maxLength
    };
  }
  func(arr, flags) {
    if (!Array.isArray(arr)) {
      return this.invalidType;
    }
    const length = arr.length;
    const minLength = this.minLength;
    const maxLength = this.maxLength;
    if (length < minLength || length > maxLength) {
      return this.invalidLength;
    }
    let issueTree = void 0;
    let output = arr;
    for (let i = 0; i < arr.length; i++) {
      const type = i < minLength ? this.head[i] : this.rest;
      const r = type.func(arr[i], flags);
      if (r !== void 0) {
        if (r.ok) {
          if (output === arr) {
            output = arr.slice();
          }
          output[i] = r.value;
        } else {
          issueTree = joinIssues(issueTree, prependPath(i, r));
        }
      }
    }
    if (issueTree) {
      return issueTree;
    } else if (arr === output) {
      return void 0;
    } else {
      return { ok: true, value: output };
    }
  }
};
function toInputType(v2) {
  const type = typeof v2;
  if (type !== "object") {
    return type;
  } else if (v2 === null) {
    return "null";
  } else if (Array.isArray(v2)) {
    return "array";
  } else {
    return type;
  }
}
function dedup(arr) {
  return Array.from(new Set(arr));
}
function findCommonKeys(rs2) {
  const map = /* @__PURE__ */ new Map();
  rs2.forEach((r) => {
    for (const key in r) {
      map.set(key, (map.get(key) || 0) + 1);
    }
  });
  const result = [];
  map.forEach((count, key) => {
    if (count === rs2.length) {
      result.push(key);
    }
  });
  return result;
}
function groupTerminals(terminals) {
  const order = /* @__PURE__ */ new Map();
  const literals = /* @__PURE__ */ new Map();
  const types = /* @__PURE__ */ new Map();
  const unknowns = [];
  const optionals = [];
  const expectedTypes = [];
  terminals.forEach(({ root, terminal }) => {
    var _a45;
    order.set(root, (_a45 = order.get(root)) !== null && _a45 !== void 0 ? _a45 : order.size);
    if (terminal.name === "never") {
    } else if (terminal.name === "optional") {
      optionals.push(root);
    } else if (terminal.name === "unknown") {
      unknowns.push(root);
    } else if (terminal.name === "literal") {
      const roots = literals.get(terminal.value) || [];
      roots.push(root);
      literals.set(terminal.value, roots);
      expectedTypes.push(toInputType(terminal.value));
    } else {
      const roots = types.get(terminal.name) || [];
      roots.push(root);
      types.set(terminal.name, roots);
      expectedTypes.push(terminal.name);
    }
  });
  literals.forEach((roots, value) => {
    const options = types.get(toInputType(value));
    if (options) {
      options.push(...roots);
      literals.delete(value);
    }
  });
  const byOrder = (a, b) => {
    var _a45, _b2;
    return ((_a45 = order.get(a)) !== null && _a45 !== void 0 ? _a45 : 0) - ((_b2 = order.get(b)) !== null && _b2 !== void 0 ? _b2 : 0);
  };
  types.forEach((roots, type) => types.set(type, dedup(roots.concat(unknowns).sort(byOrder))));
  literals.forEach((roots, value) => literals.set(value, dedup(roots.concat(unknowns)).sort(byOrder)));
  return {
    types,
    literals,
    unknowns: dedup(unknowns).sort(byOrder),
    optionals: dedup(optionals).sort(byOrder),
    expectedTypes: dedup(expectedTypes)
  };
}
function createObjectKeyMatcher(objects, key) {
  const list = [];
  for (const { root, terminal } of objects) {
    terminal.shape[key].toTerminals((t) => list.push({ root, terminal: t }));
  }
  const { types, literals, optionals, unknowns, expectedTypes } = groupTerminals(list);
  if (unknowns.length > 0 || optionals.length > 1) {
    return void 0;
  }
  for (const roots of literals.values()) {
    if (roots.length > 1) {
      return void 0;
    }
  }
  for (const roots of types.values()) {
    if (roots.length > 1) {
      return void 0;
    }
  }
  const missingValue = prependPath(key, { ok: false, code: "missing_value" });
  const issue = prependPath(key, types.size === 0 ? {
    ok: false,
    code: "invalid_literal",
    expected: Array.from(literals.keys())
  } : {
    ok: false,
    code: "invalid_type",
    expected: expectedTypes
  });
  const litMap = literals.size > 0 ? /* @__PURE__ */ new Map() : void 0;
  for (const [literal2, options] of literals) {
    litMap.set(literal2, options[0]);
  }
  const byType = types.size > 0 ? {} : void 0;
  for (const [type, options] of types) {
    byType[type] = options[0];
  }
  return function(_obj, flags) {
    var _a45;
    const obj = _obj;
    const value = obj[key];
    if (value === void 0 && !(key in obj)) {
      return optionals.length > 0 ? optionals[0].func(obj, flags) : missingValue;
    }
    const option = (_a45 = byType === null || byType === void 0 ? void 0 : byType[toInputType(value)]) !== null && _a45 !== void 0 ? _a45 : litMap === null || litMap === void 0 ? void 0 : litMap.get(value);
    return option ? option.func(obj, flags) : issue;
  };
}
function createUnionObjectMatcher(terminals) {
  if (terminals.some(({ terminal: t }) => t.name === "unknown")) {
    return void 0;
  }
  const objects = terminals.filter((item) => {
    return item.terminal.name === "object";
  });
  if (objects.length < 2) {
    return void 0;
  }
  const shapes = objects.map(({ terminal }) => terminal.shape);
  for (const key of findCommonKeys(shapes)) {
    const matcher = createObjectKeyMatcher(objects, key);
    if (matcher) {
      return matcher;
    }
  }
  return void 0;
}
function createUnionBaseMatcher(terminals) {
  const { expectedTypes, literals, types, unknowns, optionals } = groupTerminals(terminals);
  const issue = types.size === 0 && unknowns.length === 0 ? {
    ok: false,
    code: "invalid_literal",
    expected: Array.from(literals.keys())
  } : {
    ok: false,
    code: "invalid_type",
    expected: expectedTypes
  };
  const litMap = literals.size > 0 ? literals : void 0;
  const byType = types.size > 0 ? {} : void 0;
  for (const [type, options] of types) {
    byType[type] = options;
  }
  return function(value, flags) {
    var _a45, _b2;
    let options;
    if (flags & FLAG_MISSING_VALUE) {
      options = optionals;
    } else {
      options = (_b2 = (_a45 = byType === null || byType === void 0 ? void 0 : byType[toInputType(value)]) !== null && _a45 !== void 0 ? _a45 : litMap === null || litMap === void 0 ? void 0 : litMap.get(value)) !== null && _b2 !== void 0 ? _b2 : unknowns;
    }
    if (!options) {
      return issue;
    }
    let count = 0;
    let issueTree = issue;
    for (let i = 0; i < options.length; i++) {
      const r = options[i].func(value, flags);
      if (r === void 0 || r.ok) {
        return r;
      }
      issueTree = count > 0 ? joinIssues(issueTree, r) : r;
      count++;
    }
    if (count > 1) {
      return { ok: false, code: "invalid_union", tree: issueTree };
    }
    return issueTree;
  };
}
var UnionType = class extends Type {
  constructor(options) {
    super();
    this.options = options;
    this.name = "union";
  }
  toTerminals(func) {
    this.options.forEach((o) => o.toTerminals(func));
  }
  func(v2, flags) {
    let func = this._func;
    if (func === void 0) {
      const flattened = [];
      this.options.forEach((option) => option.toTerminals((terminal) => {
        flattened.push({ root: option, terminal });
      }));
      const base = createUnionBaseMatcher(flattened);
      const object2 = createUnionObjectMatcher(flattened);
      if (!object2) {
        func = base;
      } else {
        func = function(v3, f) {
          if (isObject(v3)) {
            return object2(v3, f);
          }
          return base(v3, f);
        };
      }
      this._func = func;
    }
    return func(v2, flags);
  }
};
var STRICT = Object.freeze({ mode: "strict" });
var STRIP = Object.freeze({ mode: "strip" });
var PASSTHROUGH = Object.freeze({ mode: "passthrough" });
var TransformType = class extends Type {
  constructor(transformed, transform) {
    super();
    this.transformed = transformed;
    this.transform = transform;
    this.name = "transform";
    this.undef = ok(void 0);
    this.transformChain = void 0;
    this.transformRoot = void 0;
  }
  func(v2, flags) {
    let chain = this.transformChain;
    if (!chain) {
      chain = [];
      let next = this;
      while (next instanceof TransformType) {
        chain.push(next.transform);
        next = next.transformed;
      }
      chain.reverse();
      this.transformChain = chain;
      this.transformRoot = next;
    }
    let result = this.transformRoot.func(v2, flags);
    if (result !== void 0 && !result.ok) {
      return result;
    }
    let current;
    if (result !== void 0) {
      current = result.value;
    } else if (flags & FLAG_MISSING_VALUE) {
      current = void 0;
      result = this.undef;
    } else {
      current = v2;
    }
    const options = flags & FLAG_FORBID_EXTRA_KEYS ? STRICT : flags & FLAG_STRIP_EXTRA_KEYS ? STRIP : PASSTHROUGH;
    for (let i = 0; i < chain.length; i++) {
      const r = chain[i](current, options);
      if (r !== void 0) {
        if (!r.ok) {
          return r;
        }
        current = r.value;
        result = r;
      }
    }
    return result;
  }
  toTerminals(func) {
    this.transformed.toTerminals(func);
  }
};
var LazyType = class extends Type {
  constructor(definer) {
    super();
    this.definer = definer;
    this.name = "lazy";
    this.recursing = false;
  }
  func(v2, flags) {
    if (!this.type) {
      this.type = this.definer();
    }
    return this.type.func(v2, flags);
  }
  toTerminals(func) {
    if (this.recursing) {
      return;
    }
    try {
      this.recursing = true;
      if (!this.type) {
        this.type = this.definer();
      }
      this.type.toTerminals(func);
    } finally {
      this.recursing = false;
    }
  }
};
var NeverType = class extends Type {
  constructor() {
    super(...arguments);
    this.name = "never";
    this.issue = {
      ok: false,
      code: "invalid_type",
      expected: []
    };
  }
  func(_2, __2) {
    return this.issue;
  }
};
var neverSingleton = new NeverType();
function never() {
  return neverSingleton;
}
var UnknownType = class extends Type {
  constructor() {
    super(...arguments);
    this.name = "unknown";
  }
  func(_2, __2) {
    return void 0;
  }
};
var unknownSingleton = new UnknownType();
function unknown() {
  return unknownSingleton;
}
var UndefinedType = class extends Type {
  constructor() {
    super(...arguments);
    this.name = "undefined";
    this.issue = {
      ok: false,
      code: "invalid_type",
      expected: ["undefined"]
    };
  }
  func(v2, _2) {
    return v2 === void 0 ? void 0 : this.issue;
  }
};
var undefinedSingleton = new UndefinedType();
function undefined_() {
  return undefinedSingleton;
}
var NullType = class extends Type {
  constructor() {
    super(...arguments);
    this.name = "null";
    this.issue = {
      ok: false,
      code: "invalid_type",
      expected: ["null"]
    };
  }
  func(v2, _2) {
    return v2 === null ? void 0 : this.issue;
  }
};
var nullSingleton = new NullType();
function null_() {
  return nullSingleton;
}
var NumberType = class extends Type {
  constructor() {
    super(...arguments);
    this.name = "number";
    this.issue = {
      ok: false,
      code: "invalid_type",
      expected: ["number"]
    };
  }
  func(v2, _2) {
    return typeof v2 === "number" ? void 0 : this.issue;
  }
};
var numberSingleton = new NumberType();
function number() {
  return numberSingleton;
}
var BigIntType = class extends Type {
  constructor() {
    super(...arguments);
    this.name = "bigint";
    this.issue = {
      ok: false,
      code: "invalid_type",
      expected: ["bigint"]
    };
  }
  func(v2, _2) {
    return typeof v2 === "bigint" ? void 0 : this.issue;
  }
};
var bigintSingleton = new BigIntType();
function bigint() {
  return bigintSingleton;
}
var StringType = class extends Type {
  constructor() {
    super(...arguments);
    this.name = "string";
    this.issue = {
      ok: false,
      code: "invalid_type",
      expected: ["string"]
    };
  }
  func(v2, _2) {
    return typeof v2 === "string" ? void 0 : this.issue;
  }
};
var stringSingleton = new StringType();
function string() {
  return stringSingleton;
}
var BooleanType = class extends Type {
  constructor() {
    super(...arguments);
    this.name = "boolean";
    this.issue = {
      ok: false,
      code: "invalid_type",
      expected: ["boolean"]
    };
  }
  func(v2, _2) {
    return typeof v2 === "boolean" ? void 0 : this.issue;
  }
};
var booleanSingleton = new BooleanType();
function boolean() {
  return booleanSingleton;
}
var LiteralType = class extends Type {
  constructor(value) {
    super();
    this.value = value;
    this.name = "literal";
    this.issue = {
      ok: false,
      code: "invalid_literal",
      expected: [value]
    };
  }
  func(v2, _2) {
    return v2 === this.value ? void 0 : this.issue;
  }
};
function literal(value) {
  return new LiteralType(value);
}
function object(obj) {
  return new ObjectType(obj, void 0);
}
function record(valueType) {
  return new ObjectType({}, valueType !== null && valueType !== void 0 ? valueType : unknown());
}
function array(item) {
  return new ArrayType([], item);
}
function tuple(items) {
  return new ArrayType(items);
}
function union(...options) {
  return new UnionType(options);
}
function lazy(definer) {
  return new LazyType(definer);
}

// ../../node_modules/replicache/out/replicache.js
var xr = Object.defineProperty;
var Vi = Object.getOwnPropertyDescriptor;
var Oi = Object.getOwnPropertyNames;
var Ei = Object.prototype.hasOwnProperty;
var Ti = (t, e) => {
  for (var n in e)
    xr(t, n, { get: e[n], enumerable: true });
};
var wr = (t, e, n, o) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let r of Oi(e))
      !Ei.call(t, r) && r !== n && xr(t, r, { get: () => e[r], enumerable: !(o = Vi(e, r)) || o.enumerable });
  return t;
};
var _ = (t, e, n) => (wr(t, e, "default"), n && wr(n, e, "default"));
var br = "1.0";
var Qu = parseInt(br.split(".")[1], 10);
var Zn = "/api/" + br;
var Qn = "/api/:apiMajor.:apiMinor";
var Ai = Zn + "/customer";
var ec = Qn + "/customer";
var Rr = Zn + "/license/status";
var tc = Qn + "/license/status";
var kr = Zn + "/license/active";
var nc = Qn + "/license/active";
var st = "/admin";
var oc = st + "/download";
var rc = st + "/license/:key";
var sc = st + "/licenses/active";
var ic = st + "/signups";
var ac = st + "/populate";
function eo(t) {
  no(t, "string");
}
function to(t) {
  no(t, "boolean");
}
function no(t, e) {
  typeof t !== e && Pr(t, e);
}
function qt(t) {
  t === null && Pr(t, "object"), no(t, "object");
}
function Fi(t, e) {
  let n = "Invalid type: ";
  return t == null ? n += t : n += `${typeof t} \`${t}\``, n + `, expected ${e}`;
}
function Pr(t, e) {
  throw new Error(Fi(t, e));
}
var mc = new URL("https://replicache-license.herokuapp.com/");
async function oo(t, e, n, o, r) {
  var _a45, _b2;
  r = r.withContext("licenseActive");
  let s = new URL(kr, e), a = JSON.stringify({ licenseKey: n, profileID: o });
  (_a45 = r.debug) == null ? void 0 : _a45.call(r, `Sending ${s}`, a);
  let u = await (await t("post", s.toString(), a, { "Content-Type": "application/json", Accept: "application/json" })).text();
  (_b2 = r.debug) == null ? void 0 : _b2.call(r, `Got ${s}`, u);
  let c = JSON.parse(u);
  Li(c);
}
async function ro(t, e, n, o) {
  var _a45, _b2;
  o = o.withContext("getLicenseStatus");
  let r = new URL(Rr, e), i = JSON.stringify({ licenseKey: n });
  (_a45 = o.debug) == null ? void 0 : _a45.call(o, `Sending ${r}`, i);
  let l = await (await t("post", r.toString(), i, { "Content-Type": "application/json", Accept: "application/json" })).text();
  (_b2 = o.debug) == null ? void 0 : _b2.call(o, `Got ${r}`, l);
  let u = JSON.parse(l);
  return ji(u), u;
}
function Li(t) {
  qt(t);
}
function ji(t) {
  qt(t), eo(t.status), to(t.disable), to(t.pleaseUpdate);
}
var it = "This key only good for automated testing";
var zi = new URL("http://localhost:8080/");
var Wt = new URL("https://replicache-license.herokuapp.com/");
var Ji = new URL("https://replicache-license-staging.herokuapp.com/");
function y(t, e = "Assertion failed") {
  if (!t)
    throw new Error(e);
}
function k(t) {
  $t(t, "string");
}
function A(t) {
  $t(t, "number");
}
function Mr(t) {
  $t(t, "boolean");
}
function $t(t, e) {
  typeof t !== e && re(t, e);
}
function M(t) {
  t === null && re(t, "object"), $t(t, "object");
}
function ue(t) {
  Array.isArray(t) || re(t, "array");
}
function _i(t, e) {
  let n = "Invalid type: ";
  return t == null ? n += t : n += `${typeof t} \`${t}\``, n + `, expected ${e}`;
}
function re(t, e) {
  throw new Error(_i(t, e));
}
function vr(t) {
  if (t === null)
    throw new Error("Expected non-null value");
}
function at(t) {
  if (t === void 0)
    throw new Error("Expected non undefined value");
}
function so() {
  throw new Error("Unreachable");
}
var j = false;
var Ki = Object.prototype.hasOwnProperty;
var X = Object.hasOwn || ((t, e) => Ki.call(t, e));
function W(t, e) {
  if (t === e)
    return true;
  if (typeof t != typeof e)
    return false;
  switch (typeof t) {
    case "boolean":
    case "number":
    case "string":
      return false;
  }
  if (t = t, Array.isArray(t)) {
    if (!Array.isArray(e) || t.length !== e.length)
      return false;
    for (let r = 0; r < t.length; r++)
      if (!W(t[r], e[r]))
        return false;
    return true;
  }
  if (t === null || e === null || Array.isArray(e))
    return false;
  t = t, e = e;
  let n = 0;
  for (let r in t)
    if (X(t, r)) {
      if (!W(t[r], e[r]))
        return false;
      n++;
    }
  let o = 0;
  for (let r in e)
    X(e, r) && o++;
  return n === o;
}
function te(t) {
  if (!j) {
    switch (typeof t) {
      case "boolean":
      case "number":
      case "string":
        return;
      case "object":
        return t === null ? void 0 : Array.isArray(t) ? Bi(t) : Hr(t);
    }
    re(t, "JSON value");
  }
}
function Nr(t) {
  M(t), Hr(t);
}
function Hr(t) {
  for (let e in t)
    if (X(t, e)) {
      let n = t[e];
      n !== void 0 && te(n);
    }
}
function Bi(t) {
  for (let e of t)
    te(e);
}
function Yt(t, e) {
  switch (typeof t) {
    case "boolean":
    case "number":
    case "string":
      return true;
    case "object":
      return t === null ? true : Array.isArray(t) ? Wi(t, e) : qi(t, e);
  }
  return false;
}
function qi(t, e) {
  for (let n in t)
    if (X(t, n)) {
      e.push(n);
      let o = t[n];
      if (o !== void 0 && !Yt(o, e))
        return false;
      e.pop();
    }
  return true;
}
function Wi(t, e) {
  for (let n = 0; n < t.length; n++) {
    if (e.push(n), !Yt(t[n], e))
      return false;
    e.pop();
  }
  return true;
}
async function Xt(t, e, n, o) {
  let r = { headers: { "Content-type": "application/json", Authorization: e, "X-Replicache-RequestID": n }, body: JSON.stringify(o), method: "POST" }, s = new Request(t, r), i = await fetch(s), a = i.status;
  return a !== 200 ? [void 0, { httpStatusCode: a, errorMessage: await i.text() }] : [i, { httpStatusCode: a, errorMessage: "" }];
}
function Vr(t, e) {
  return t === e ? 0 : t < e ? -1 : 1;
}
function Ae(t, e) {
  if (t === e)
    return 0;
  if (t === null)
    return -1;
  if (e === null)
    return 1;
  let n = Or(t), o = Or(e);
  return typeof n == "string" || typeof o == "string" ? Vr(String(n), String(o)) : n - o;
}
function Or(t) {
  return typeof t == "string" || typeof t == "number" ? t : t.order;
}
function Er(t) {
  if (!(t === null || typeof t == "string" || typeof t == "number") && (Nr(t), !(typeof t.order == "string" || typeof t.order == "number")))
    throw new Error("Invalid cookie");
}
function Tr(t, e) {
  return typeof t == "object" && t !== null && t.error === e;
}
function io(t) {
  return typeof t.error == "string";
}
function G(t) {
  return Tr(t, "ClientStateNotFound");
}
function K(t) {
  if (!Tr(t, "VersionNotSupported"))
    return false;
  let { versionType: e } = t;
  switch (e) {
    case void 0:
    case "pull":
    case "push":
    case "schema":
      return true;
  }
  return false;
}
function Ar(t) {
  y(K(t));
}
function lt(t) {
  M(t), A(t.httpStatusCode), k(t.errorMessage);
}
function ao(t) {
  ue(t);
  for (let e of t)
    $i(e);
}
function $i(t) {
  switch (M(t), t.op) {
    case "put":
      k(t.key), te(t.value);
      break;
    case "del":
      k(t.key);
      break;
    case "clear":
      break;
    default:
      throw new Error(`unknown patch op \`${t.op}\`, expected one of \`put\`, \`del\`, \`clear\``);
  }
}
function lo(t) {
  async function e(n, o) {
    let [r, s] = await Xt(t.pullURL, t.auth, o, n);
    return r ? { response: await r.json(), httpRequestInfo: s } : { httpRequestInfo: s };
  }
  return Fr.add(e), e;
}
var Fr = /* @__PURE__ */ new WeakSet();
function Lr(t) {
  return Fr.has(t);
}
function Yi(t) {
  if (M(t), G(t) || K(t))
    return;
  let e = t;
  e.cookie !== void 0 && te(e.cookie), A(e.lastMutationID), ao(e.patch);
}
function Xi(t) {
  if (M(t), G(t) || K(t))
    return;
  let e = t;
  e.cookie !== void 0 && Er(e.cookie), Zi(e.lastMutationIDChanges), ao(e.patch);
}
function Zi(t) {
  M(t);
  for (let [e, n] of Object.entries(t))
    k(e), A(n);
}
function jr(t) {
  M(t), lt(t.httpRequestInfo), t.response !== void 0 && Xi(t.response);
}
function zr(t) {
  M(t), lt(t.httpRequestInfo), t.response !== void 0 && Yi(t.response);
}
var Zt = /* @__PURE__ */ new WeakSet();
function E(t) {
  return j || co(t, []), t;
}
function co(t, e) {
  switch (typeof t) {
    case "undefined":
      throw new TypeError("Unexpected value undefined");
    case "boolean":
    case "number":
    case "string":
      return;
    case "object": {
      if (t === null || Zt.has(t))
        return;
      Zt.add(t), e.includes(t) && re(t, "Cyclic JSON object"), e.push(t), Object.freeze(t), Array.isArray(t) ? Qi(t, e) : ea(t, e), e.pop();
      return;
    }
    default:
      re(t, "JSON value");
  }
}
function Qi(t, e) {
  for (let n of t)
    co(n, e);
}
function ea(t, e) {
  for (let n in t)
    if (X(t, n)) {
      let o = t[n];
      o !== void 0 && co(o, e);
    }
}
function se(t) {
  if (!j && !uo(t, []))
    throw new Error("Expected frozen object");
}
function uo(t, e) {
  switch (typeof t) {
    case "boolean":
    case "number":
    case "string":
      return true;
    case "object":
      if (t === null || Zt.has(t))
        return true;
      if (!Object.isFrozen(t))
        return false;
      if (e.includes(t) && re(t, "Cyclic JSON object"), e.push(t), Array.isArray(t)) {
        for (let n of t)
          if (!uo(n, e))
            return e.pop(), false;
      } else
        for (let n in t)
          if (X(t, n)) {
            let o = t[n];
            if (o !== void 0 && !uo(o, e))
              return e.pop(), false;
          }
      return Zt.add(t), e.pop(), true;
    default:
      re(t, "JSON value");
  }
}
function Qt(t) {
  if (t !== void 0)
    return E(t);
}
var Jr = Promise.resolve(true);
var Gr = Promise.resolve(false);
var hp = Promise.resolve(void 0);
var U = Promise.resolve();
var be = Symbol();
var _e, _a;
var Fe = (_a = class {
  constructor(e) {
    __publicField(this, "o", /* @__PURE__ */ new Map());
    __privateAdd(this, _e, void 0);
    __privateSet(this, _e, e);
  }
  has(e) {
    switch (this.o.get(e)) {
      case void 0:
        return __privateGet(this, _e).has(e);
      case be:
        return Gr;
      default:
        return Jr;
    }
  }
  async get(e) {
    let n = this.o.get(e);
    switch (n) {
      case be:
        return;
      case void 0: {
        let o = await __privateGet(this, _e).get(e);
        return Qt(o);
      }
      default:
        return n;
    }
  }
  put(e, n) {
    return this.o.set(e, E(n)), U;
  }
  del(e) {
    return this.o.set(e, be), U;
  }
  release() {
    __privateGet(this, _e).release();
  }
  get closed() {
    return __privateGet(this, _e).closed;
  }
}, _e = new WeakMap(), _a);
var na = { durability: "relaxed" };
var tn = "chunks";
var _e2, _t, _n, _o, o_fn, _a2;
var Se = (_a2 = class {
  constructor(e) {
    __privateAdd(this, _o);
    __privateAdd(this, _e2, void 0);
    __privateAdd(this, _t, false);
    __privateAdd(this, _n, false);
    __privateSet(this, _e2, sa(e));
  }
  read() {
    return __privateMethod(this, _o, o_fn).call(this, ra);
  }
  write() {
    return __privateMethod(this, _o, o_fn).call(this, oa);
  }
  async close() {
    __privateGet(this, _n) || (await __privateGet(this, _e2)).close(), __privateSet(this, _t, true);
  }
  get closed() {
    return __privateGet(this, _t);
  }
}, _e2 = new WeakMap(), _t = new WeakMap(), _n = new WeakMap(), _o = new WeakSet(), o_fn = async function(e) {
  let n = async (r) => {
    let { promise: s, resolve: i, reject: a } = resolver(), l = indexedDB.open(r);
    l.onupgradeneeded = () => {
      let c = l.transaction;
      vr(c), c.abort(), __privateSet(this, _n, true), a(new ut(`Replicache IndexedDB not found: ${r}`));
    }, l.onsuccess = () => i(l.result), l.onerror = () => a(l.error);
    let u = await s;
    return u.onversionchange = () => u.close(), u;
  }, o = await __privateGet(this, _e2);
  try {
    return e(o);
  } catch (r) {
    if (!__privateGet(this, _t) && r instanceof DOMException) {
      if (r.name === "InvalidStateError") {
        __privateSet(this, _e2, n(o.name));
        let s = await __privateGet(this, _e2);
        return e(s);
      } else if (r.name === "NotFoundError")
        throw __privateSet(this, _n, true), indexedDB.deleteDatabase(o.name), new ut(`Replicache IndexedDB ${o.name} missing object store. Deleting db.`);
    }
    throw r;
  }
}, _a2);
var _e3, _t2, _a3;
var en = (_a3 = class {
  constructor(e) {
    __privateAdd(this, _e3, void 0);
    __privateAdd(this, _t2, false);
    __privateSet(this, _e3, e);
  }
  has(e) {
    return new Promise((n, o) => {
      let r = ho(__privateGet(this, _e3)).count(e);
      r.onsuccess = () => n(r.result > 0), r.onerror = () => o(r.error);
    });
  }
  get(e) {
    return new Promise((n, o) => {
      let r = ho(__privateGet(this, _e3)).get(e);
      r.onsuccess = () => n(Qt(r.result)), r.onerror = () => o(r.error);
    });
  }
  release() {
    __privateSet(this, _t2, true);
  }
  get closed() {
    return __privateGet(this, _t2);
  }
}, _e3 = new WeakMap(), _t2 = new WeakMap(), _a3);
var _e4, _t3, _a4;
var po = (_a4 = class extends Fe {
  constructor(e) {
    super(new en(e));
    __privateAdd(this, _e4, void 0);
    __privateAdd(this, _t3, false);
    __privateSet(this, _e4, e);
  }
  commit() {
    return this.o.size === 0 ? U : new Promise((e, n) => {
      let o = __privateGet(this, _e4), r = ho(o);
      for (let [s, i] of this.o)
        i === be ? r.delete(s) : r.put(i, s);
      o.oncomplete = () => e(), o.onerror = () => n(o.error);
    });
  }
  release() {
    __privateSet(this, _t3, true);
  }
  get closed() {
    return __privateGet(this, _t3);
  }
}, _e4 = new WeakMap(), _t3 = new WeakMap(), _a4);
function oa(t) {
  let e = t.transaction(tn, "readwrite", na);
  return new po(e);
}
function ra(t) {
  let e = t.transaction(tn, "readonly");
  return new en(e);
}
function ho(t) {
  return t.objectStore(tn);
}
function sa(t) {
  return new Promise((e, n) => {
    let o = indexedDB.open(t);
    o.onupgradeneeded = () => {
      o.result.createObjectStore(tn);
    }, o.onsuccess = () => {
      let r = o.result;
      r.onversionchange = () => r.close(), e(r);
    }, o.onerror = () => n(o.error);
  });
}
var ut = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "IDBNotFoundError");
  }
};
var _e5, _t4, _n2, _a5;
var Le = (_a5 = class {
  constructor(e, n) {
    __privateAdd(this, _e5, void 0);
    __privateAdd(this, _t4, void 0);
    __privateAdd(this, _n2, false);
    __privateSet(this, _e5, e), __privateSet(this, _t4, n);
  }
  release() {
    __privateGet(this, _t4).call(this), __privateSet(this, _n2, true);
  }
  get closed() {
    return __privateGet(this, _n2);
  }
  has(e) {
    return Promise.resolve(__privateGet(this, _e5).has(e));
  }
  get(e) {
    return Promise.resolve(__privateGet(this, _e5).get(e));
  }
}, _e5 = new WeakMap(), _t4 = new WeakMap(), _n2 = new WeakMap(), _a5);
var _e6, _a6;
var nn = (_a6 = class extends Fe {
  constructor(e, n) {
    super(new Le(e, n));
    __privateAdd(this, _e6, void 0);
    __privateSet(this, _e6, e);
  }
  commit() {
    return this.o.forEach((e, n) => {
      e === be ? __privateGet(this, _e6).delete(n) : __privateGet(this, _e6).set(n, e);
    }), this.o.clear(), this.release(), U;
  }
}, _e6 = new WeakMap(), _a6);
var Ur = /* @__PURE__ */ new Map();
var _e7, _t5, _n3, _a7;
var ct = (_a7 = class {
  constructor(e) {
    __privateAdd(this, _e7, void 0);
    __privateAdd(this, _t5, void 0);
    __privateAdd(this, _n3, false);
    let n = Ur.get(e), o, r;
    n ? { lock: o, map: r } = n : (o = new RWLock(), r = /* @__PURE__ */ new Map(), Ur.set(e, { lock: o, map: r })), __privateSet(this, _t5, o), __privateSet(this, _e7, r);
  }
  async read() {
    let e = await __privateGet(this, _t5).read();
    return new Le(__privateGet(this, _e7), e);
  }
  async write() {
    let e = await __privateGet(this, _t5).write();
    return new nn(__privateGet(this, _e7), e);
  }
  close() {
    return __privateSet(this, _n3, true), U;
  }
  get closed() {
    return __privateGet(this, _n3);
  }
}, _e7 = new WeakMap(), _t5 = new WeakMap(), _n3 = new WeakMap(), _a7);
var Z = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "AbortError");
  }
};
var la = Promise.resolve();
var _p = new Promise(() => {
});
function ce(t, e) {
  return t === 0 ? la : new Promise((n, o) => {
    let r = setTimeout(() => {
      n();
    }, t);
    e && e.addEventListener("abort", () => {
      clearTimeout(r), o(new Z("Aborted"));
    });
  });
}
function ie(t, e, n, o, r) {
  ua(t, e, n, o, r);
}
async function ua(t, e, n, o, r) {
  var _a45, _b2, _c6, _d2, _e38;
  if (!r.aborted) {
    for (o = o.withContext("bgIntervalProcess", t), (_a45 = o.debug) == null ? void 0 : _a45.call(o, "Starting"); !r.aborted; ) {
      try {
        await ce(n(), r);
      } catch (s) {
        if (!(s instanceof Z))
          throw s;
      }
      if (!r.aborted) {
        (_b2 = o.debug) == null ? void 0 : _b2.call(o, "Running");
        try {
          await e();
        } catch (s) {
          r.aborted ? (_c6 = o.debug) == null ? void 0 : _c6.call(o, "Error running most likely due to close.", s) : (_d2 = o.error) == null ? void 0 : _d2.call(o, "Error running.", s);
        }
      }
    }
    (_e38 = o.debug) == null ? void 0 : _e38.call(o, "Stopping");
  }
}
var h = {};
Ti(h, { assert: () => ne, is: () => pa, parse: () => _r, readonly: () => da, readonlyArray: () => pt, readonlyObject: () => Q, readonlyRecord: () => dt, test: () => Do });
_(h, mjs_exports);
function go(t) {
  switch (typeof t) {
    case "string":
    case "number":
    case "boolean":
      return JSON.stringify(t);
    case "undefined":
      return "undefined";
    case "bigint":
      return t.toString() + "n";
    default:
      return t === null ? "null" : Array.isArray(t) ? "array" : typeof t;
  }
}
function fo(t, e) {
  if (!(e == null ? void 0 : e.length))
    return go(t);
  let n = t;
  for (let o of e)
    n = n[o];
  return go(n);
}
function yo(t, e, n = (o) => String(o)) {
  if (e.length === 1)
    return n(e[0]);
  let o = `${n(e[e.length - 2])} ${t} ${n(e[e.length - 1])}`;
  return e.length === 2 ? o : `${e.slice(0, -2).map(n).join(", ")}, ${o}`;
}
function ca(t, e) {
  var _a45, _b2;
  let n = t.issues[0], { path: o } = n, r = (o == null ? void 0 : o.length) ? ` at ${o.join(".")}` : "";
  switch (n.code) {
    case "invalid_type":
      return `Expected ${yo("or", n.expected)}${r}. Got ${fo(e, o)}`;
    case "missing_value": {
      let s = o && o.length > 1 ? ` at ${o.slice(0, -1).join(".")}` : "";
      return ((_a45 = n.path) == null ? void 0 : _a45.length) ? `Missing property ${n.path.at(-1)}${s}` : `TODO Unknown missing property${s}`;
    }
    case "invalid_literal":
      return `Expected literal value ${yo("or", n.expected, go)}${r} Got ${fo(e, o)}`;
    case "invalid_length":
      return `Expected array with length ${n.minLength === n.maxLength ? n.minLength : `between ${n.minLength} and ${n.maxLength}`}${r}. Got array with length ${e.length}`;
    case "unrecognized_keys":
      return n.keys.length === 1 ? `Unexpected property ${n.keys[0]}${r}` : `Unexpected properties ${yo("and", n.keys)}${r}`;
    case "invalid_union":
      return `Invalid union value${r}`;
    case "custom_error": {
      let { error: s } = n;
      return `${s ? typeof s == "string" ? s : (_b2 = s.message) != null ? _b2 : "unknown" : "unknown"}${r}. Got ${fo(e, o)}`;
    }
  }
}
function _r(t, e, n) {
  let o = Do(t, e, n);
  if (!o.ok)
    throw new TypeError(o.error);
  return o.value;
}
function pa(t, e, n) {
  return Do(t, e, n).ok;
}
function ne(t, e, n) {
  _r(t, e, n);
}
function Do(t, e, n) {
  let o = e.try(t, n ? { mode: n } : void 0);
  return o.ok ? o : { ok: false, error: ca(o, t) };
}
function da(t) {
  return t;
}
function Q(t) {
  return object(t);
}
function pt(t) {
  return array(t);
}
function dt(t) {
  return record(t);
}
var pe = typeof crypto < "u" && typeof crypto.randomUUID < "u" ? ma : ha;
function ha() {
  return ya(Uint8Array.from({ length: 36 }, () => Math.random() * 256));
}
function ma() {
  return crypto.randomUUID();
}
var fa = [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 3, 0, 0, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
function ya(t) {
  return fa.map((e, n) => {
    switch (e) {
      case 0:
        return (t[n] & 15).toString(16);
      case 1:
        return ((t[n] & 3) + 8).toString(16);
      case 3:
        return "4";
      case 2:
        return "-";
    }
  }).join("");
}
var ga = /^[0-9a-v-]+$/;
var Da = "00000000-0000-4000-8000-000000000000";
var T = Da;
var z = Sa("", pe);
function Sa(t, e) {
  let n, o = 0;
  return () => {
    n || (n = Ia(t, e()));
    let r = String(o++);
    return Ca(n, r);
  };
}
function Ia(t, e) {
  return t + e.replaceAll("-", "").slice(t.length);
}
function Ca(t, e) {
  return y(e.length <= 12), t + e.padStart(12, "0");
}
function wa(t) {
  return typeof t == "string" && ga.test(t);
}
function B(t) {
  ne(t, de);
}
var de = h.string().assert(wa, "Invalid hash");
var ht = class {
  constructor(e, n, o) {
    __publicField(this, "hash");
    __publicField(this, "data");
    __publicField(this, "meta");
    y(!o.includes(e), "Chunk cannot reference itself"), se(n), this.hash = e, this.data = n, this.meta = o;
  }
};
function So(t) {
  if (!Array.isArray(t))
    throw new Error("Meta must be an array");
  for (let e of t)
    k(e);
}
function on(t, e, n) {
  let o = n();
  return new ht(o, t, e);
}
function Io() {
  throw new Error("unexpected call to compute chunk hash");
}
function rn(t, e, n) {
  return new Co(t, e, n).compute();
}
var _e8, _t6, _n4, _o2, _r2, _s, _a8, _l, _c, c_fn, _h, h_fn, _u, u_fn, _S, S_fn, _a9;
var Co = (_a9 = class {
  constructor(e, n, o) {
    __privateAdd(this, _c);
    __privateAdd(this, _h);
    __privateAdd(this, _u);
    __privateAdd(this, _S);
    __privateAdd(this, _e8, void 0);
    __privateAdd(this, _t6, void 0);
    __privateAdd(this, _n4, void 0);
    __privateAdd(this, _o2, void 0);
    __privateAdd(this, _r2, void 0);
    __privateAdd(this, _s, void 0);
    __privateAdd(this, _a8, void 0);
    __privateAdd(this, _l, void 0);
    let r = [], s = [];
    for (let i of e)
      i.old !== i.new && (i.old && s.push(i.old), i.new && r.push(i.new));
    __privateSet(this, _e8, r), __privateSet(this, _t6, s), __privateSet(this, _n4, n), __privateSet(this, _o2, o), __privateSet(this, _s, /* @__PURE__ */ new Map()), __privateSet(this, _a8, /* @__PURE__ */ new Map()), __privateSet(this, _l, o.areRefsCounted !== void 0), __privateSet(this, _r2, __privateGet(this, _l) ? /* @__PURE__ */ new Set() : null);
  }
  async compute() {
    for (let e of __privateGet(this, _e8))
      await __privateMethod(this, _c, c_fn).call(this, e, 1);
    if (await Promise.all(Array.from(__privateGet(this, _n4).values(), (e) => __privateMethod(this, _u, u_fn).call(this, e))), __privateGet(this, _l)) {
      y(__privateGet(this, _o2).areRefsCounted), y(__privateGet(this, _r2));
      let e;
      do {
        e = false;
        for (let n of __privateGet(this, _n4).values())
          if (!__privateGet(this, _o2).areRefsCounted(n) && !__privateGet(this, _r2).has(n) && __privateGet(this, _s).get(n) !== 0) {
            await __privateMethod(this, _h, h_fn).call(this, n, 1), e = true;
            break;
          }
      } while (e);
    }
    for (let e of __privateGet(this, _t6))
      await __privateMethod(this, _c, c_fn).call(this, e, -1);
    if (!j)
      for (let [e, n] of __privateGet(this, _s))
        y(n >= 0, `ref count update must be non-negative. ${e}:${n}`);
    return __privateGet(this, _s);
  }
}, _e8 = new WeakMap(), _t6 = new WeakMap(), _n4 = new WeakMap(), _o2 = new WeakMap(), _r2 = new WeakMap(), _s = new WeakMap(), _a8 = new WeakMap(), _l = new WeakMap(), _c = new WeakSet(), c_fn = async function(e, n) {
  await __privateMethod(this, _u, u_fn).call(this, e), __privateMethod(this, _S, S_fn).call(this, e, n) && await __privateMethod(this, _h, h_fn).call(this, e, n);
}, _h = new WeakSet(), h_fn = async function(e, n) {
  var _a45;
  if (e === T)
    return;
  let o = await __privateGet(this, _o2).getRefs(e);
  if (j || y(o || __privateGet(this, _l) && !__privateGet(this, _n4).has(e), "refs must be defined"), o !== void 0) {
    (_a45 = __privateGet(this, _r2)) == null ? void 0 : _a45.add(e);
    let r = o.map((s) => __privateMethod(this, _c, c_fn).call(this, s, n));
    await Promise.all(r);
  }
}, _u = new WeakSet(), u_fn = function(e) {
  let n = __privateGet(this, _a8).get(e);
  return n === void 0 && (n = (async () => {
    let o = await __privateGet(this, _o2).getRefCount(e) || 0;
    return __privateGet(this, _s).set(e, o), o;
  })(), __privateGet(this, _a8).set(e, n)), n;
}, _S = new WeakSet(), S_fn = function(e, n) {
  let o = __privateGet(this, _s).get(e);
  return A(o), __privateGet(this, _s).set(e, o + n), o === 0 && n === 1 || o === 1 && n === -1;
}, _a9);
function mt(t) {
  return `c/${t}/d`;
}
function ft(t) {
  return `c/${t}/m`;
}
function sn(t) {
  return `c/${t}/r`;
}
function wo(t) {
  return `h/${t}`;
}
var yt = class extends Error {
  constructor(e) {
    super(`Chunk not found ${e}`);
    __publicField(this, "name", "ChunkNotFoundError");
    __publicField(this, "hash");
    this.hash = e;
  }
};
async function an(t, e) {
  let n = await t.getChunk(e);
  if (n)
    return n;
  throw new yt(e);
}
async function ze(t, e) {
  let n = await e.getHead(t);
  return y(n, `Missing head ${t}`), n;
}
var _e9, _t7, _n5, _a10;
var Ie = (_a10 = class {
  constructor(e, n, o) {
    __privateAdd(this, _e9, void 0);
    __privateAdd(this, _t7, void 0);
    __privateAdd(this, _n5, void 0);
    __privateSet(this, _e9, e), __privateSet(this, _t7, n), __privateSet(this, _n5, o);
  }
  async read() {
    return new ln(await __privateGet(this, _e9).read(), __privateGet(this, _n5));
  }
  async write() {
    return new xo(await __privateGet(this, _e9).write(), __privateGet(this, _t7), __privateGet(this, _n5));
  }
  close() {
    return __privateGet(this, _e9).close();
  }
}, _e9 = new WeakMap(), _t7 = new WeakMap(), _n5 = new WeakMap(), _a10);
var ln = class {
  constructor(e, n) {
    __publicField(this, "e");
    __publicField(this, "assertValidHash");
    this.e = e, this.assertValidHash = n;
  }
  hasChunk(e) {
    return this.e.has(mt(e));
  }
  async getChunk(e) {
    let n = await this.e.get(mt(e));
    if (n === void 0)
      return;
    let o = await this.e.get(ft(e)), r;
    return o !== void 0 ? (So(o), r = o) : r = [], new ht(e, n, r);
  }
  mustGetChunk(e) {
    return an(this, e);
  }
  async getHead(e) {
    let n = await this.e.get(wo(e));
    if (n !== void 0)
      return B(n), n;
  }
  release() {
    this.e.release();
  }
  get closed() {
    return this.e.closed;
  }
};
var _e10, _t8, _n6, _o3, o_fn2, _r3, r_fn, _s2, s_fn, _a11;
var xo = (_a11 = class extends ln {
  constructor(e, n, o) {
    super(e, o);
    __privateAdd(this, _o3);
    __privateAdd(this, _r3);
    __privateAdd(this, _s2);
    __privateAdd(this, _e10, void 0);
    __privateAdd(this, _t8, /* @__PURE__ */ new Set());
    __privateAdd(this, _n6, /* @__PURE__ */ new Map());
    __publicField(this, "createChunk", (e, n) => on(e, n, __privateGet(this, _e10)));
    __privateSet(this, _e10, n);
  }
  get kvWrite() {
    return this.e;
  }
  async putChunk(e) {
    let { hash: n, data: o, meta: r } = e;
    this.assertValidHash(n);
    let s = mt(n), i = this.e.put(s, o), a;
    if (r.length > 0) {
      for (let l of r)
        this.assertValidHash(l);
      a = this.e.put(ft(n), r);
    }
    __privateGet(this, _t8).add(n), await i, await a;
  }
  setHead(e, n) {
    return __privateMethod(this, _o3, o_fn2).call(this, e, n);
  }
  removeHead(e) {
    return __privateMethod(this, _o3, o_fn2).call(this, e, void 0);
  }
  async commit() {
    let e = await rn(__privateGet(this, _n6).values(), __privateGet(this, _t8), this);
    await __privateMethod(this, _r3, r_fn).call(this, e), await this.e.commit();
  }
  async getRefCount(e) {
    let n = await this.e.get(sn(e));
    if (n !== void 0) {
      if (A(n), n < 0 || n > 65535 || n !== (n | 0))
        throw new Error(`Invalid ref count ${n}. We expect the value to be a Uint16`);
      return n;
    }
  }
  async getRefs(e) {
    let n = await this.e.get(ft(e));
    return n === void 0 ? [] : (So(n), n);
  }
  release() {
    this.e.release();
  }
}, _e10 = new WeakMap(), _t8 = new WeakMap(), _n6 = new WeakMap(), _o3 = new WeakSet(), o_fn2 = async function(e, n) {
  let o = await this.getHead(e), r = wo(e), s;
  n === void 0 ? s = this.e.del(r) : s = this.e.put(r, n);
  let i = __privateGet(this, _n6).get(e);
  i === void 0 ? __privateGet(this, _n6).set(e, { new: n, old: o }) : i.new = n, await s;
}, _r3 = new WeakSet(), r_fn = async function(e) {
  let n = [];
  for (let [o, r] of e)
    if (r === 0)
      n.push(__privateMethod(this, _s2, s_fn).call(this, o));
    else {
      let s = sn(o);
      n.push(this.e.put(s, r));
    }
  await Promise.all(n);
}, _s2 = new WeakSet(), s_fn = async function(e) {
  await Promise.all([this.e.del(mt(e)), this.e.del(ft(e)), this.e.del(sn(e))]), __privateGet(this, _t8).delete(e);
}, _a11);
function bo(t) {
  if (t !== (t | 0) || t < 4 || t > 7)
    throw new Error(`Unsupported format version: ${t}`);
  return t;
}
var _e11, _t9, _n7, _o4, o_fn3, _a12;
var Ro = (_a12 = class {
  constructor(e, n) {
    __privateAdd(this, _o4);
    __privateAdd(this, _e11, void 0);
    __privateAdd(this, _t9, void 0);
    __privateAdd(this, _n7, void 0);
    __privateSet(this, _e11, e), __privateSet(this, _t9, n), __privateSet(this, _n7, new Se(n));
  }
  read() {
    return __privateMethod(this, _o4, o_fn3).call(this, (e) => e.read());
  }
  write() {
    return __privateMethod(this, _o4, o_fn3).call(this, (e) => e.write());
  }
  close() {
    return __privateGet(this, _n7).close();
  }
  get closed() {
    return __privateGet(this, _n7).closed;
  }
}, _e11 = new WeakMap(), _t9 = new WeakMap(), _n7 = new WeakMap(), _o4 = new WeakSet(), o_fn3 = async function(e) {
  var _a45, _b2;
  try {
    return await e(__privateGet(this, _n7));
  } catch (n) {
    if (xa(n))
      return __privateGet(this, _n7) instanceof Se && ((_b2 = (_a45 = __privateGet(this, _e11)).info) == null ? void 0 : _b2.call(_a45, "Switching to MemStore because of Firefox private browsing error"), __privateSet(this, _n7, new ct(__privateGet(this, _t9)))), e(__privateGet(this, _n7));
    throw n;
  }
}, _a12);
function xa(t) {
  return Kr() && t instanceof DOMException && t.name === "InvalidStateError" && t.message === "A mutation operation was attempted on a database that did not allow mutations.";
}
function Kr() {
  return navigator.userAgent.includes("Firefox");
}
function gt(t, e) {
  return Kr() ? new Ro(t, e) : new Se(e);
}
function ko(t) {
  return new Promise((e, n) => {
    let o = indexedDB.deleteDatabase(t);
    o.onsuccess = () => e(), o.onerror = () => n(o.error);
  });
}
function H(t, e) {
  return Po(t.read(), e);
}
function he(t, e) {
  return Po(t.write(), e);
}
function v(t, e) {
  return Po(t.write(), async (n) => {
    let o = await e(n);
    return await n.commit(), o;
  });
}
async function Po(t, e) {
  let n = await t;
  try {
    return await e(n);
  } finally {
    n.release();
  }
}
var ba = Q({ prefix: h.string().optional(), jsonPointer: h.string(), allowEmpty: h.boolean().optional() });
var Br = dt(ba);
function Ra(t, e) {
  var _a45, _b2, _c6, _d2;
  return t.jsonPointer === e.jsonPointer && ((_a45 = t.allowEmpty) != null ? _a45 : false) === ((_b2 = e.allowEmpty) != null ? _b2 : false) && ((_c6 = t.prefix) != null ? _c6 : "") === ((_d2 = e.prefix) != null ? _d2 : "");
}
function un(t, e) {
  if (Object.keys(t).length !== Object.keys(e).length)
    return false;
  for (let [n, o] of Object.entries(t)) {
    let r = e[n];
    if (!r || !Ra(o, r))
      return false;
  }
  return true;
}
var ka = Q({ headHash: de, mutatorNames: pt(h.string()), indexes: Br, mutationIDs: dt(h.number()), lastServerAckdMutationIDs: h.record(h.number()), disabled: h.boolean() });
var qr = "client-groups";
function Pa(t) {
  ne(t, ka);
}
function Ma(t) {
  M(t);
  let e = /* @__PURE__ */ new Map();
  for (let [n, o] of Object.entries(t))
    o !== void 0 && (Pa(o), e.set(n, o));
  return e;
}
function va(t, e) {
  let n = {};
  for (let [o, r] of t.entries())
    e.assertValidHash(r.headHash), n[o] = { ...r, mutatorNames: [...r.mutatorNames.values()] };
  return E(n);
}
async function Na(t, e) {
  let n = await e.getChunk(t);
  return Ma(n == null ? void 0 : n.data);
}
async function ee(t) {
  let e = await t.getHead(qr);
  return e ? Na(e, t) : /* @__PURE__ */ new Map();
}
async function cn(t, e) {
  let n = await ee(e);
  for (let [o, r] of t) {
    let s = n.get(o);
    Wr(r, s);
  }
  return $r(t, e);
}
async function Dt(t, e, n) {
  let o = await ee(n), r = o.get(t);
  Wr(e, r);
  let s = new Map(o);
  return s.set(t, e), $r(s, n);
}
function Wr(t, e) {
  let n = new Set(t.mutatorNames);
  y(n.size === t.mutatorNames.length, "A client group's mutatorNames must be a set."), e !== void 0 && (y(un(e.indexes, t.indexes), "A client group's index definitions must never change."), y(Mo(n, e.mutatorNames), "A client group's mutatorNames must never change."));
}
async function $r(t, e) {
  let n = va(t, e), o = Array.from(t.values(), (s) => s.headHash), r = e.createChunk(n, o);
  return await e.putChunk(r), await e.setHead(qr, r.hash), t;
}
function Mo(t, e) {
  if (e.length !== t.size)
    return false;
  for (let n of e)
    if (!t.has(n))
      return false;
  return true;
}
async function Re(t, e) {
  return (await ee(e)).get(t);
}
function pn(t) {
  for (let [e, n] of Object.entries(t.mutationIDs)) {
    let o = t.lastServerAckdMutationIDs[e];
    if (o === void 0 && n !== 0 || o < n)
      return true;
  }
  return false;
}
async function dn(t, e) {
  let n = await Re(t, e);
  if (!n)
    return;
  let o = { ...n, disabled: true };
  await Dt(t, o, e);
}
function ke(t, e) {
  let n = t.length, o = e.length, r = Math.min(n, o);
  for (let s = 0; s < r; ) {
    let i = t.codePointAt(s), a = e.codePointAt(s);
    if (i !== a) {
      if (i < 128 && a < 128)
        return i - a;
      let l = Zr(i, Yr), u = Zr(a, Xr);
      return Ha(Yr, l, Xr, u);
    }
    s += Va(i);
  }
  return n - o;
}
function Ha(t, e, n, o) {
  let r = Math.min(e, o);
  for (let s = 0; s < r; s++) {
    let i = t[s], a = n[s];
    if (i !== a)
      return i - a;
  }
  return e - o;
}
function Va(t) {
  return t > 65535 ? 2 : 1;
}
var Qr = () => Array.from({ length: 4 }, () => 0);
var Yr = Qr();
var Xr = Qr();
function Zr(t, e) {
  if (t < 128)
    return e[0] = t, 1;
  let n, o;
  if (t <= 2047)
    n = 1, o = 192;
  else if (t <= 65535)
    n = 2, o = 224;
  else if (t <= 1114111)
    n = 3, o = 240;
  else
    throw new Error("Invalid code point");
  e[0] = (t >> 6 * n) + o;
  let r = 1;
  for (; n > 0; n--) {
    let s = t >> 6 * (n - 1);
    e[r++] = 128 | s & 63;
  }
  return r;
}
function Pe(t, e) {
  return ke(t, e) > 0;
}
function hn(t, e) {
  return ke(t, e) < 0;
}
function mn(t, e) {
  return ke(t, e) <= 0;
}
function fn(t, e) {
  let n = 0;
  for (; n < t; ) {
    let o = n + (t - n >> 1), r = e(o);
    if (r === 0)
      return o;
    r > 0 ? n = o + 1 : t = o;
  }
  return n;
}
function* St(...t) {
  for (let e of t)
    yield* e;
}
var vo = 0;
var No = 1;
function es(t, e, n) {
  return E([t, n >= 7 ? e : e.map((o) => o.slice(0, 2))]);
}
async function Ct(t, e, n, o) {
  let r = await n.getNode(e);
  if (o !== n.rootHash)
    return Ct(t, n.rootHash, n, n.rootHash);
  if (Ge(r))
    return r;
  let { entries: s } = r, i = me(t, s);
  i === s.length && i--;
  let a = s[i];
  return Ct(t, a[1], n, o);
}
function me(t, e) {
  return fn(e.length, (n) => ke(t, e[n][0]));
}
function wt(t, e, n) {
  return t !== e.length && e[t][0] === n;
}
function Ho(t, e, n) {
  if (j && e >= 7)
    return t;
  ue(t), se(t), y(t.length >= 2);
  let [o, r] = t;
  A(o), ue(r);
  let s = o > 0 ? k : te;
  if (e >= 7) {
    for (let a of r)
      Oa(a, s);
    return t;
  }
  let i = r.map((a) => Ea(a, s, n));
  return [o, i];
}
function Oa(t, e) {
  ue(t), y(t.length >= 3), k(t[0]), e(t[1]), A(t[2]);
}
function Ea(t, e, n) {
  ue(t), y(t.length >= 2), k(t[0]), e(t[1]);
  let o = n(t[0], t[1]);
  return [t[0], t[1], o];
}
var _e12, _a13;
var gn = (_a13 = class {
  constructor(e, n, o) {
    __publicField(this, "entries");
    __publicField(this, "hash");
    __publicField(this, "isMutable");
    __privateAdd(this, _e12, -1);
    this.entries = e, this.hash = n, this.isMutable = o;
  }
  maxKey() {
    return this.entries[this.entries.length - 1][0];
  }
  getChildNodeSize(e) {
    if (__privateGet(this, _e12) !== -1)
      return __privateGet(this, _e12);
    let n = e.chunkHeaderSize;
    for (let o of this.entries)
      n += o[2];
    return __privateSet(this, _e12, n);
  }
  c(e) {
    __privateSet(this, _e12, -1), e.updateNode(this);
  }
}, _e12 = new WeakMap(), _a13);
function Vo(t, e) {
  return es(t.level, t.entries, e);
}
var _e13, e_fn, _a14;
var Me = (_a14 = class extends gn {
  constructor() {
    super(...arguments);
    __privateAdd(this, _e13);
    __publicField(this, "level", 0);
  }
  set(e, n, o, r) {
    let s, i = me(e, this.entries);
    return wt(i, this.entries, e) ? s = 1 : s = 0, Promise.resolve(__privateMethod(this, _e13, e_fn).call(this, r, i, s, [e, n, o]));
  }
  del(e, n) {
    let o = me(e, this.entries);
    return wt(o, this.entries, e) ? Promise.resolve(__privateMethod(this, _e13, e_fn).call(this, n, o, 1)) : Promise.resolve(this);
  }
  async *keys(e) {
    for (let n of this.entries)
      yield n[0];
  }
  async *entriesIter(e) {
    for (let n of this.entries)
      yield n;
  }
}, _e13 = new WeakSet(), e_fn = function(e, n, o, ...r) {
  if (this.isMutable)
    return this.entries.splice(n, o, ...r), this.c(e), this;
  let s = yn(this.entries, n, o, ...r);
  return e.newDataNodeImpl(s);
}, _a14);
function yn(t, e, n, ...o) {
  let r = t.slice(0, e);
  for (let s = 0; s < o.length; s++)
    r.push(o[s]);
  for (let s = e + n; s < t.length; s++)
    r.push(t[s]);
  return r;
}
var _e14, e_fn2, _t10, t_fn, _a15;
var xt = (_a15 = class extends gn {
  constructor(e, n, o, r) {
    super(e, n, r);
    __privateAdd(this, _e14);
    __privateAdd(this, _t10);
    __publicField(this, "level");
    this.level = o;
  }
  async set(e, n, o, r) {
    let s = me(e, this.entries);
    s === this.entries.length && s--;
    let i = this.entries[s][1], l = await (await r.getNode(i)).set(e, n, o, r), u = l.getChildNodeSize(r);
    if (u > r.maxSize || u < r.minSize)
      return __privateMethod(this, _e14, e_fn2).call(this, r, s, l);
    let c = It(l, r.getEntrySize);
    return __privateMethod(this, _t10, t_fn).call(this, r, s, c);
  }
  async del(e, n) {
    let o = me(e, this.entries);
    if (o === this.entries.length)
      return this;
    let r = this.entries[o][1], s = await n.getNode(r), i = s.hash, a = await s.del(e, n);
    if (a.hash === i)
      return this;
    if (a.entries.length === 0) {
      let l = yn(this.entries, o, 1);
      return n.newInternalNodeImpl(l, this.level);
    }
    if (o === 0 && this.entries.length === 1)
      return a;
    if (a.getChildNodeSize(n) > n.minSize) {
      let l = It(a, n.getEntrySize);
      return __privateMethod(this, _t10, t_fn).call(this, n, o, l);
    }
    return __privateMethod(this, _e14, e_fn2).call(this, n, o, a);
  }
  async *keys(e) {
    for (let n of this.entries)
      yield* (await e.getNode(n[1])).keys(e);
  }
  async *entriesIter(e) {
    for (let n of this.entries)
      yield* (await e.getNode(n[1])).entriesIter(e);
  }
  getChildren(e, n, o) {
    let r = [];
    for (let s = e; s < n && s < this.entries.length; s++)
      r.push(o.getNode(this.entries[s][1]));
    return Promise.all(r);
  }
  async getCompositeChildren(e, n, o) {
    let { level: r } = this;
    if (n === 0)
      return new _a15([], z(), r - 1, true);
    let s = await this.getChildren(e, e + n, o);
    if (r > 1) {
      let a = [];
      for (let l of s)
        a.push(...l.entries);
      return new _a15(a, z(), r - 1, true);
    }
    y(r === 1);
    let i = [];
    for (let a of s)
      i.push(...a.entries);
    return new Me(i, z(), true);
  }
}, _e14 = new WeakSet(), e_fn2 = async function(e, n, o) {
  let r = this.level - 1, s = this.entries, i, a, l;
  if (n > 0) {
    let p = s[n - 1][1], f = await e.getNode(p);
    i = St(f.entries, o.entries), a = n - 1, l = 2;
  } else if (n < s.length - 1) {
    let p = s[n + 1][1], f = await e.getNode(p);
    i = St(o.entries, f.entries), a = n, l = 2;
  } else
    i = o.entries, a = n, l = 1;
  let u = Oo(i, (p) => p[2], e.minSize - e.chunkHeaderSize, e.maxSize - e.chunkHeaderSize), c = [];
  for (let p of u) {
    let f = e.newNodeImpl(p, r), g = It(f, e.getEntrySize);
    c.push(g);
  }
  if (this.isMutable)
    return this.entries.splice(a, l, ...c), this.c(e), this;
  let d = yn(s, a, l, ...c);
  return e.newInternalNodeImpl(d, this.level);
}, _t10 = new WeakSet(), t_fn = function(e, n, o) {
  if (this.isMutable)
    return this.entries.splice(n, 1, o), this.c(e), this;
  let r = yn(this.entries, n, 1, o);
  return e.newInternalNodeImpl(r, this.level);
}, _a15);
function Dn(t, e, n, o) {
  return n === 0 ? new Me(t, e, o) : new xt(t, e, n, o);
}
function Ge(t) {
  return t.level === 0;
}
function Oo(t, e, n, o) {
  let r = [], s = [], i = 0, a = [];
  for (let l of t) {
    let u = e(l);
    u >= o ? (a.length > 0 && (r.push(a), s.push(i)), r.push([l]), s.push(u), i = 0, a = []) : i + u >= n ? (a.push(l), r.push(a), s.push(i + u), i = 0, a = []) : (i += u, a.push(l));
  }
  return i > 0 && (s.length > 0 && i + s[s.length - 1] <= o ? r[r.length - 1].push(...a) : r.push(a)), r;
}
var Sn = es(0, [], 7);
var ts = new Me([], T, false);
function It(t, e) {
  let n = t.maxKey(), o = t.hash, r = e(n, o);
  return [n, o, r];
}
var ae = 1;
var Ue = 4;
var Ta = 5;
var Aa = 8;
function fe(t) {
  switch (typeof t) {
    case "string":
      return ae + Ue + t.length;
    case "number":
      return Fa(t) ? t <= -(2 ** 30) || t >= 2 ** 30 - 1 ? ae + Ta : ae + Ue : ae + Aa;
    case "boolean":
      return ae;
    case "object":
      if (t === null)
        return ae;
      if (Array.isArray(t)) {
        let e = 2 * ae + Ue;
        for (let n of t)
          e += fe(n);
        return e;
      }
      {
        let e = t, n = 2 * ae + Ue;
        for (let o in e)
          if (X(e, o)) {
            let r = e[o];
            r !== void 0 && (n += fe(o) + fe(r));
          }
        return n;
      }
  }
  throw new Error(`Invalid value. type: ${typeof t}, value: ${t}`);
}
function Fa(t) {
  return t === (t | 0);
}
var La = 2 * ae + Ue + ae + Ue;
function In(t, e) {
  return La + fe(t) + fe(e);
}
var ns = -1;
var rs = 0;
var bt = 1;
var Rt = 2;
var wn = 3;
var Cn = 0;
var os = 1;
function* ss(t, e) {
  let n = 0, o = 0, r;
  function s(a, l) {
    a[wn] === ns && (a[wn] = l);
  }
  function i() {
    return [n, 0, 0, ns];
  }
  for (; n < t.length && o < e.length; )
    t[n][Cn] === e[o][Cn] ? (W(t[n][os], e[o][os]) ? r && (s(r, 0), yield r, r = void 0) : (r || (r = i()), r[Rt]++, r[bt]++, s(r, o)), n++, o++) : t[n][Cn] < e[o][Cn] ? (r || (r = i()), r[bt]++, n++) : (r || (r = i()), r[Rt]++, s(r, o), o++);
  o < e.length && (r || (r = i()), r[Rt] += e.length - o, s(r, o)), n < t.length && (r || (r = i()), r[bt] += t.length - n), r && (s(r, 0), yield r);
}
var ja = 11;
var F = class {
  constructor(e, n, o = T, r = In, s = ja) {
    __publicField(this, "p", /* @__PURE__ */ new Map());
    __publicField(this, "a");
    __publicField(this, "l");
    __publicField(this, "rootHash");
    __publicField(this, "getEntrySize");
    __publicField(this, "chunkHeaderSize");
    this.a = e, this.l = n, this.rootHash = o, this.getEntrySize = r, this.chunkHeaderSize = s;
  }
  async getNode(e) {
    if (e === T)
      return ts;
    let n = this.p.get(e);
    if (n)
      return n;
    let o = await this.a.mustGetChunk(e), r = Ho(o.data, this.l, this.getEntrySize), s = Dn(r[No], e, r[vo], false);
    return this.p.set(e, s), s;
  }
  async get(e) {
    let n = await Ct(e, this.rootHash, this, this.rootHash), o = me(e, n.entries);
    if (wt(o, n.entries, e))
      return n.entries[o][1];
  }
  async has(e) {
    let n = await Ct(e, this.rootHash, this, this.rootHash), o = me(e, n.entries);
    return wt(o, n.entries, e);
  }
  async isEmpty() {
    let { rootHash: e } = this, n = await this.getNode(this.rootHash);
    return this.rootHash !== e ? this.isEmpty() : n.entries.length === 0;
  }
  scan(e) {
    return Eo(this.rootHash, () => this.rootHash, this.rootHash, e, async (n) => {
      let o = await this.getNode(n);
      if (o)
        return [o.level, o.isMutable ? o.entries.slice() : o.entries];
      let r = await this.a.mustGetChunk(n);
      return Ho(r.data, this.l, this.getEntrySize);
    });
  }
  async *keys() {
    yield* (await this.getNode(this.rootHash)).keys(this);
  }
  async *entries() {
    yield* (await this.getNode(this.rootHash)).entriesIter(this);
  }
  [Symbol.asyncIterator]() {
    return this.entries();
  }
  async *diff(e) {
    let [n, o] = await Promise.all([this.getNode(this.rootHash), e.getNode(e.rootHash)]);
    yield* xn(o, n, e, this);
  }
};
async function* xn(t, e, n, o) {
  if (t.level > e.level) {
    let s = await t.getCompositeChildren(0, t.entries.length, n);
    yield* xn(s, e, n, o);
    return;
  }
  if (e.level > t.level) {
    let s = await e.getCompositeChildren(0, e.entries.length, o);
    yield* xn(t, s, n, o);
    return;
  }
  if (Ge(t) && Ge(e)) {
    yield* za(t.entries, e.entries);
    return;
  }
  let r = ss(t.entries, e.entries);
  for (let s of r) {
    let [i, a] = await Promise.all([t.getCompositeChildren(s[rs], s[bt], n), e.getCompositeChildren(s[wn], s[Rt], o)]);
    yield* xn(i, a, n, o);
  }
}
function* za(t, e) {
  let n = t.length, o = e.length, r = 0, s = 0;
  for (; r < n && s < o; ) {
    let i = t[r][0], a = e[s][0];
    i === a ? (W(t[r][1], e[s][1]) || (yield { op: "change", key: i, oldValue: t[r][1], newValue: e[s][1] }), r++, s++) : i < a ? (yield { op: "del", key: i, oldValue: t[r][1] }, r++) : (yield { op: "add", key: a, newValue: e[s][1] }, s++);
  }
  for (; r < n; r++)
    yield { op: "del", key: t[r][0], oldValue: t[r][1] };
  for (; s < o; s++)
    yield { op: "add", key: e[s][0], newValue: e[s][1] };
}
async function* Eo(t, e, n, o, r) {
  if (n === T)
    return;
  let s = await r(n), i = s[No], a = 0;
  if (o && (a = me(o, i)), s[vo] > 0)
    for (; a < i.length; a++)
      yield* Eo(t, e, i[a][1], o, r), o = "";
  else
    for (; a < i.length; a++) {
      let l = e();
      if (t !== l) {
        yield* Eo(l, e, l, i[a][0], r);
        return;
      }
      yield i[a];
    }
}
async function _e15(t, e) {
  let n = [], o = e === "add" ? (r) => ({ op: "add", key: r[0], newValue: r[1] }) : (r) => ({ op: "del", key: r[0], oldValue: r[1] });
  for await (let r of t.entries())
    n.push(o(r));
  return n;
}
var N = "main";
function To(t) {
  return Ka(t.meta);
}
function ve(t) {
  return Be(t.meta);
}
function Ja(t) {
  return ve(t) || To(t);
}
function Ga(t) {
  return us(t.meta);
}
function Ua(t) {
  return Wa(t.meta);
}
function Ao(t) {
  return Ga(t) || Ua(t);
}
var bn = class {
  constructor(e) {
    __publicField(this, "chunk");
    this.chunk = e;
  }
  get meta() {
    return this.chunk.data.meta;
  }
  get valueHash() {
    return this.chunk.data.valueHash;
  }
  getMutationID(e, n) {
    return Rn(e, n, this.meta);
  }
  async getNextMutationID(e, n) {
    return await this.getMutationID(e, n) + 1;
  }
  get indexes() {
    return this.chunk.data.indexes;
  }
};
async function Rn(t, e, n) {
  var _a45;
  switch (n.type) {
    case 1:
      return n.lastMutationID;
    case 3:
      return n.lastMutationID;
    case 5:
      return (_a45 = n.lastMutationIDs[t]) != null ? _a45 : 0;
    case 2:
      return n.mutationID;
    case 4: {
      if (n.clientID === t)
        return n.mutationID;
      let { basisHash: o } = n, r = await O(o, e);
      return Rn(t, e, r.meta);
    }
    default:
      so();
  }
}
async function kn(t, e) {
  return (await Nn(t, e)).filter((o) => Ja(o));
}
async function Pn(t, e) {
  return (await Nn(t, e)).filter((o) => ve(o));
}
async function Mn(t, e, n) {
  let o = [], r = new Map(Object.entries(e));
  for (; !Ao(t) && r.size > 0; ) {
    if (ve(t)) {
      let { meta: i } = t, a = r.get(i.clientID);
      a !== void 0 && (i.mutationID <= a ? r.delete(i.clientID) : o.push(t));
    }
    let { basisHash: s } = t.meta;
    if (s === null)
      throw new Error(`Commit ${t.chunk.hash} has no basis`);
    t = await O(s, n);
  }
  return o;
}
async function is(t, e) {
  let n = await e.getHead(t);
  return y(n, `Missing head ${t}`), $(n, e);
}
async function Fo(t, e) {
  return (await $(t, e)).chunk.hash;
}
async function $(t, e) {
  let n = await O(t, e);
  return Ne(n, e);
}
async function Ne(t, e) {
  for (; !Ao(t); ) {
    let { meta: n } = t;
    if (Be(n))
      t = await O(n.baseSnapshotHash, e);
    else {
      let { basisHash: o } = n;
      if (o === null)
        throw new Error(`Commit ${t.chunk.hash} has no basis`);
      t = await O(o, e);
    }
  }
  return t;
}
function vn(t, e) {
  var _a45;
  let n = t.meta;
  return us(n) ? [(_a45 = n.lastMutationIDs[e]) != null ? _a45 : 0, n.cookieJSON] : [n.lastMutationID, n.cookieJSON];
}
function kt(t, e) {
  return Ae(t.meta.cookieJSON, e.meta.cookieJSON);
}
async function Nn(t, e) {
  let n = await O(t, e), o = [];
  for (; !Ao(n); ) {
    let { meta: r } = n, { basisHash: s } = r;
    if (s === null)
      throw new Error(`Commit ${n.chunk.hash} has no basis`);
    o.push(n), n = await O(s, e);
  }
  return o.push(n), o;
}
async function O(t, e) {
  let n = await e.mustGetChunk(t);
  return el(n);
}
async function Ke(t, e) {
  let n = await ze(t, e);
  return O(n, e);
}
function _a16(t) {
  A(t.lastMutationID);
}
function as(t) {
  if (A(t.mutationID), k(t.mutatorName), !t.mutatorName)
    throw new Error("Missing mutator name");
  te(t.mutatorArgsJSON), t.originalHash !== null && B(t.originalHash), A(t.timestamp);
}
function Lo(t) {
  k(t.clientID), as(t);
}
function Be(t) {
  return t.type === 4;
}
function Ka(t) {
  return t.type === 2;
}
function ls(t) {
  t.basisHash !== null && B(t.basisHash), te(t.cookieJSON);
}
function Ba(t) {
  ls(t), A(t.lastMutationID);
}
function Pt(t) {
  ls(t), qa(t.lastMutationIDs);
}
function qa(t) {
  M(t);
  for (let e of Object.values(t))
    A(e);
}
function le(t) {
  Pt(t.meta);
}
function us(t) {
  return t.type === 5;
}
function Wa(t) {
  return t.type === 3;
}
function $a(t) {
  switch (M(t), se(t), t.basisHash !== null && k(t.basisHash), A(t.type), t.type) {
    case 1:
      _a16(t);
      break;
    case 2:
      as(t);
      break;
    case 4:
      Lo(t);
      break;
    case 3:
      Ba(t);
      break;
    case 5:
      Pt(t);
      break;
    default:
      throw new Error(`Invalid enum value ${t.type}`);
  }
}
function cs(t, e) {
  var _a45, _b2;
  return t.jsonPointer === e.jsonPointer && ((_a45 = t.allowEmpty) != null ? _a45 : false) === ((_b2 = e.allowEmpty) != null ? _b2 : false) && t.keyPrefix === e.keyPrefix;
}
function Ya(t) {
  M(t), se(t), k(t.name), k(t.keyPrefix), k(t.jsonPointer), t.allowEmpty !== void 0 && Mr(t.allowEmpty);
}
function ps(t, e) {
  var _a45, _b2;
  return { name: t, keyPrefix: (_a45 = e.prefix) != null ? _a45 : "", jsonPointer: e.jsonPointer, allowEmpty: (_b2 = e.allowEmpty) != null ? _b2 : false };
}
function Xa(t) {
  M(t), se(t), Ya(t.definition), k(t.valueHash);
}
function Za(t) {
  ue(t), se(t);
  for (let e of t)
    Xa(e);
}
function ds(t, e, n, o, r, s, i, a, l) {
  return Mt(t, vt({ type: 2, basisHash: e, mutationID: n, mutatorName: o, mutatorArgsJSON: r, originalHash: s, timestamp: l }, i, a));
}
function hs(t, e, n, o, r, s, i, a, l, u, c) {
  return Mt(t, vt({ type: 4, basisHash: e, baseSnapshotHash: n, mutationID: o, mutatorName: r, mutatorArgsJSON: s, originalHash: i, timestamp: u, clientID: c }, a, l));
}
function ms(t, e, n, o, r, s) {
  return Mt(t, Qa(e, n, o, r, s));
}
function fs(t, e, n, o, r, s) {
  return Mt(t, jo(e, n, o, r, s));
}
function Qa(t, e, n, o, r) {
  return vt({ type: 3, basisHash: t, lastMutationID: e, cookieJSON: n }, o, r);
}
function jo(t, e, n, o, r) {
  return vt({ type: 5, basisHash: t, lastMutationIDs: e, cookieJSON: n }, o, r);
}
function ys(t, e, n, o, r) {
  return Mt(t, vt({ type: 1, basisHash: e, lastMutationID: n }, o, r));
}
function el(t) {
  return nl(t), new bn(t);
}
function Mt(t, e) {
  return new bn(t(e, zo(e)));
}
function zo(t) {
  let e = [t.valueHash], { meta: n } = t;
  switch (n.type) {
    case 1:
      n.basisHash && e.push(n.basisHash);
      break;
    case 2:
    case 4:
      n.basisHash && e.push(n.basisHash);
      break;
    case 3:
    case 5:
      break;
    default:
      so();
  }
  for (let o of t.indexes)
    e.push(o.valueHash);
  return e;
}
function vt(t, e, n) {
  return E({ meta: t, valueHash: e, indexes: n });
}
function tl(t) {
  j || (M(t), se(t), $a(t.meta), k(t.valueHash), Za(t.indexes));
}
function nl(t) {
  let { data: e } = t;
  tl(e);
  let n = /* @__PURE__ */ new Set();
  for (let o of e.indexes) {
    let { name: r } = o.definition;
    if (n.has(r))
      throw new Error(`Duplicate index ${r}`);
    n.add(r);
  }
}
async function Hn(t) {
  let e = [];
  for await (let n of t)
    e.push(n);
  return e;
}
function Ce(t, e) {
  return Hn(e.diff(t));
}
var _e16, _t11, _n8, n_fn, _a17;
var we = (_a17 = class extends F {
  constructor(e, n, o = T, r = 8 * 1024, s = 16 * 1024, i = In, a) {
    super(e, n, o, i, a);
    __privateAdd(this, _n8);
    __privateAdd(this, _e16, new Lock());
    __privateAdd(this, _t11, /* @__PURE__ */ new Map());
    __publicField(this, "minSize");
    __publicField(this, "maxSize");
    this.minSize = r, this.maxSize = s;
  }
  updateNode(e) {
    y(e.isMutable), __privateGet(this, _t11).delete(e.hash), e.hash = z(), __privateMethod(this, _n8, n_fn).call(this, e);
  }
  newInternalNodeImpl(e, n) {
    let o = new xt(e, z(), n, true);
    return __privateMethod(this, _n8, n_fn).call(this, o), o;
  }
  newDataNodeImpl(e) {
    let n = new Me(e, z(), true);
    return __privateMethod(this, _n8, n_fn).call(this, n), n;
  }
  newNodeImpl(e, n) {
    let o = Dn(e, z(), n, true);
    return __privateMethod(this, _n8, n_fn).call(this, o), o;
  }
  put(e, n) {
    return __privateGet(this, _e16).withLock(async () => {
      let o = await this.getNode(this.rootHash), r = this.getEntrySize(e, n), s = await o.set(e, n, r, this);
      if (s.getChildNodeSize(this) > this.maxSize) {
        let i = this.chunkHeaderSize, a = Oo(s.entries, (d) => d[2], this.minSize - i, this.maxSize - i), { level: l } = s, u = a.map((d) => {
          let p = this.newNodeImpl(d, l);
          return It(p, this.getEntrySize);
        }), c = this.newInternalNodeImpl(u, l + 1);
        this.rootHash = c.hash;
        return;
      }
      this.rootHash = s.hash;
    });
  }
  del(e) {
    return __privateGet(this, _e16).withLock(async () => {
      let o = await (await this.getNode(this.rootHash)).del(e, this), r = this.rootHash !== o.hash;
      return r && (o.level > 0 && o.entries.length === 1 ? this.rootHash = o.entries[0][1] : this.rootHash = o.hash), r;
    });
  }
  clear() {
    return __privateGet(this, _e16).withLock(() => {
      __privateGet(this, _t11).clear(), this.rootHash = T;
    });
  }
  flush() {
    return __privateGet(this, _e16).withLock(async () => {
      let e = this.a;
      if (this.rootHash === T) {
        let r = e.createChunk(Sn, []);
        return await e.putChunk(r), r.hash;
      }
      let n = [], o = gs(this.rootHash, n, e.createChunk, __privateGet(this, _t11), this.l);
      return await Promise.all(n.map((r) => e.putChunk(r))), __privateGet(this, _t11).clear(), this.rootHash = o, o;
    });
  }
}, _e16 = new WeakMap(), _t11 = new WeakMap(), _n8 = new WeakSet(), n_fn = function(e) {
  y(e.isMutable), __privateGet(this, _t11).set(e.hash, e), this.p.set(e.hash, e);
}, _a17);
function gs(t, e, n, o, r) {
  let s = o.get(t);
  if (s === void 0)
    return t;
  if (Ge(s)) {
    let u = n(Vo(s, r), []);
    return e.push(u), u.hash;
  }
  let i = [], { entries: a } = s;
  for (let u = 0; u < a.length; u++) {
    let c = a[u], d = c[1], p = gs(d, e, n, o, r);
    p !== d && (a[u] = [c[0], p, c[2]]), i.push(p);
  }
  let l = n(Vo(s, r), i);
  return e.push(l), l.hash;
}
function Jo(t) {
  let e;
  return () => (e === void 0 && (e = t()), e);
}
var Nt = class {
  constructor(e, n) {
    __publicField(this, "meta");
    __publicField(this, "map");
    this.meta = e, this.map = n;
  }
};
var Vn = class extends Nt {
  flush() {
    return this.map.flush();
  }
  clear() {
    return this.map.clear();
  }
};
async function On(t, e, n, o, r, s, i) {
  var _a45;
  try {
    for (let a of rl(o, r, s, i))
      switch (n) {
        case 0:
          await e.put(a, r);
          break;
        case 1:
          await e.del(a);
          break;
      }
  } catch (a) {
    (_a45 = t.info) == null ? void 0 : _a45.call(t, "Not indexing value", r, ":", a);
  }
}
function rl(t, e, n, o) {
  let r = sl(e, n);
  if (r === void 0) {
    if (o)
      return [];
    throw new Error(`No value at path: ${n}`);
  }
  let s = Array.isArray(r) ? r : [r], i = [];
  for (let a of s)
    if (typeof a == "string")
      i.push(Ds([a, t]));
    else
      throw new Error("Unsupported target type");
  return i;
}
var Go = "\0";
var Uo = "\0";
function Ds(t) {
  let e = t[0], n = t[1];
  if (e.includes("\0"))
    throw new Error("Secondary key cannot contain null byte");
  return Go + e + Uo + n;
}
function _o5(t, e) {
  let n = Ds([t, e || ""]);
  return e === void 0 ? n.slice(0, n.length - 1) : n;
}
function qe(t) {
  if (t[0] !== Go)
    throw new Error("Invalid version");
  let e = Go.length, n = Uo.length, o = t.indexOf(Uo, e);
  if (o === -1)
    throw new Error("Invalid formatting");
  let r = t.slice(e, o), s = t.slice(o + n);
  return [r, s];
}
function sl(t, e) {
  function n(s) {
    if (!(s.startsWith("+") || s.startsWith("0") && s.length !== 1))
      return parseInt(s, 10);
  }
  if (e === "")
    return t;
  if (!e.startsWith("/"))
    throw new Error(`Invalid JSON pointer: ${e}`);
  let o = e.split("/").slice(1).map((s) => s.replace(/~1/g, "/").replace(/~0/g, "~")), r = t;
  for (let s of o) {
    let i;
    if (Array.isArray(r)) {
      let a = n(s);
      if (a === void 0)
        return;
      i = r[a];
    } else {
      if (r === null)
        return;
      typeof r == "object" && (r = r, i = r[s]);
    }
    if (i === void 0)
      return;
    r = i;
  }
  return r;
}
var _e17, _a18;
var Ht = (_a18 = class {
  constructor(e, n, o) {
    __privateAdd(this, _e17, void 0);
    __publicField(this, "map");
    __publicField(this, "indexes");
    __privateSet(this, _e17, e), this.map = n, this.indexes = o;
  }
  has(e) {
    return this.map.has(e);
  }
  get(e) {
    return this.map.get(e);
  }
  isEmpty() {
    return this.map.isEmpty();
  }
  getMapForIndex(e) {
    let n = this.indexes.get(e);
    if (n === void 0)
      throw new Error(`Unknown index name: ${e}`);
    return n.map;
  }
  get closed() {
    return __privateGet(this, _e17).closed;
  }
  close() {
    __privateGet(this, _e17).release();
  }
}, _e17 = new WeakMap(), _a18);
function Ss(t, e) {
  return il(N, t, e);
}
async function il(t, e, n) {
  let o = await Ke(t, e);
  return al(o, e, n);
}
function al(t, e, n) {
  let o = We(t, e, n), r = new F(e, n, t.valueHash);
  return new Ht(e, r, o);
}
function We(t, e, n) {
  let o = /* @__PURE__ */ new Map();
  for (let r of t.indexes)
    o.set(r.definition.name, new Nt(r, new F(e, n, r.valueHash)));
  return o;
}
var He = class extends Map {
  set(e, n) {
    return n.length === 0 ? this : super.set(e, n);
  }
};
async function Is(t, e, n, o, r) {
  let s = new He();
  if (!o.shouldComputeDiffs())
    return s;
  let i = new F(n, r, t.valueHash), a = new F(n, r, e.valueHash), l = await Ce(i, a);
  return s.set("", l), await Ko(t, e, n, s, o, r), s;
}
async function Ko(t, e, n, o, r, s) {
  let i = We(t, n, s), a = We(e, n, s);
  for (let [l, u] of i) {
    if (!r.shouldComputeDiffsForIndex(l))
      continue;
    let c = a.get(l);
    if (c !== void 0) {
      y(c !== u);
      let d = await Ce(u.map, c.map);
      a.delete(l), o.set(l, d);
    } else {
      let d = await _e15(u.map, "del");
      o.set(l, d);
    }
  }
  for (let [l, u] of a) {
    if (!r.shouldComputeDiffsForIndex(l))
      continue;
    let c = await _e15(u.map, "add");
    o.set(l, c);
  }
}
var _e18, _t12, _n9, _o6, _r4, _s3, s_fn2, _a19;
var Vt = (_a19 = class extends Ht {
  constructor(e, n, o, r, s, i, a) {
    super(e, n, s);
    __privateAdd(this, _s3);
    __privateAdd(this, _e18, void 0);
    __privateAdd(this, _t12, void 0);
    __privateAdd(this, _n9, void 0);
    __privateAdd(this, _o6, void 0);
    __privateAdd(this, _r4, void 0);
    __privateSet(this, _e18, e), __privateSet(this, _t12, o), __privateSet(this, _n9, r), __privateSet(this, _o6, i), __privateSet(this, _r4, a), o === void 0 ? y(r.basisHash === T) : y(r.basisHash === o.chunk.hash);
  }
  async put(e, n, o) {
    if (__privateGet(this, _n9).type === 1)
      throw new Error("Not allowed");
    let r = Jo(() => this.map.get(n));
    await En(e, this.indexes, n, r, o), await this.map.put(n, o);
  }
  getMutationID() {
    return Rn(__privateGet(this, _o6), __privateGet(this, _e18), __privateGet(this, _n9));
  }
  async del(e, n) {
    if (__privateGet(this, _n9).type === 1)
      throw new Error("Not allowed");
    let o = Jo(() => this.map.get(n));
    return o !== void 0 && await En(e, this.indexes, n, o, void 0), this.map.del(n);
  }
  async clear() {
    if (__privateGet(this, _n9).type === 1)
      throw new Error("Not allowed");
    await this.map.clear();
    let e = [];
    for (let n of this.indexes.values())
      e.push(n.clear());
    await Promise.all(e);
  }
  async putCommit() {
    let e = await this.map.flush(), n = [];
    for (let s of this.indexes.values()) {
      let i = await s.flush(), a = { definition: s.meta.definition, valueHash: i };
      n.push(a);
    }
    let o, r = __privateGet(this, _n9);
    switch (r.type) {
      case 2: {
        let { basisHash: s, mutationID: i, mutatorName: a, mutatorArgsJSON: l, originalHash: u, timestamp: c } = r;
        o = ds(__privateGet(this, _e18).createChunk, s, i, a, l, u, e, n, c);
        break;
      }
      case 4: {
        y(__privateGet(this, _r4) >= 5);
        let { basisHash: s, mutationID: i, mutatorName: a, mutatorArgsJSON: l, originalHash: u, timestamp: c } = r;
        o = hs(__privateGet(this, _e18).createChunk, s, await Fo(s, __privateGet(this, _e18)), i, a, l, u, e, n, c, __privateGet(this, _o6));
        break;
      }
      case 3: {
        y(__privateGet(this, _r4) <= 4);
        let { basisHash: s, lastMutationID: i, cookieJSON: a } = r;
        o = ms(__privateGet(this, _e18).createChunk, s, i, a, e, n);
        break;
      }
      case 5: {
        y(__privateGet(this, _r4) > 5);
        let { basisHash: s, lastMutationIDs: i, cookieJSON: a } = r;
        o = fs(__privateGet(this, _e18).createChunk, s, i, a, e, n);
        break;
      }
      case 1: {
        let { basisHash: s, lastMutationID: i } = r;
        if (__privateGet(this, _t12) !== void 0) {
          if (await __privateGet(this, _t12).getMutationID(__privateGet(this, _o6), __privateGet(this, _e18)) !== i)
            throw new Error("Index change must not change mutationID");
          if (__privateGet(this, _t12).valueHash !== e)
            throw new Error("Index change must not change valueHash");
        }
        o = ys(__privateGet(this, _e18).createChunk, s, i, e, n);
        break;
      }
    }
    return await __privateGet(this, _e18).putChunk(o.chunk), o;
  }
  async commit(e) {
    let o = (await this.putCommit()).chunk.hash;
    return await __privateGet(this, _e18).setHead(e, o), await __privateGet(this, _e18).commit(), o;
  }
  async commitWithDiffs(e, n) {
    let o = this.putCommit(), r = await __privateMethod(this, _s3, s_fn2).call(this, n), s = (await o).chunk.hash;
    return await __privateGet(this, _e18).setHead(e, s), await __privateGet(this, _e18).commit(), [s, r];
  }
  close() {
    __privateGet(this, _e18).release();
  }
}, _e18 = new WeakMap(), _t12 = new WeakMap(), _n9 = new WeakMap(), _o6 = new WeakMap(), _r4 = new WeakMap(), _s3 = new WeakSet(), s_fn2 = async function(e) {
  let n = new He();
  if (!e.shouldComputeDiffs())
    return n;
  let o = [];
  if (__privateGet(this, _t12)) {
    let s = new F(__privateGet(this, _e18), __privateGet(this, _r4), __privateGet(this, _t12).valueHash);
    o = await Ce(s, this.map);
  }
  n.set("", o);
  let r;
  __privateGet(this, _t12) ? r = We(__privateGet(this, _t12), __privateGet(this, _e18), __privateGet(this, _r4)) : r = /* @__PURE__ */ new Map();
  for (let [s, i] of this.indexes) {
    if (!e.shouldComputeDiffsForIndex(s))
      continue;
    let a = r.get(s);
    y(i !== a);
    let l = await (a ? Ce(a.map, i.map) : _e15(i.map, "add"));
    n.set(s, l);
  }
  for (let [s, i] of r)
    if (!this.indexes.has(s) && e.shouldComputeDiffsForIndex(s)) {
      let a = await _e15(i.map, "del");
      n.set(s, a);
    }
  return n;
}, _a19);
async function Tn(t, e, n, o, r, s, i, a) {
  let l = await O(t, r), u = new we(r, a, l.valueHash), c = await l.getNextMutationID(i, r), d = An(l, r, a);
  return new Vt(r, u, l, a >= 5 ? { type: 4, basisHash: t, baseSnapshotHash: await Fo(t, r), mutatorName: e, mutatorArgsJSON: n, mutationID: c, originalHash: o, timestamp: s, clientID: i } : { type: 2, basisHash: t, mutatorName: e, mutatorArgsJSON: n, mutationID: c, originalHash: o, timestamp: s }, d, i, a);
}
async function Cs(t, e, n, o, r, s, i) {
  y(i <= 4);
  let a = await O(t, o), l = new we(o, i, a.valueHash);
  return new Vt(o, l, a, { basisHash: t, type: 3, lastMutationID: e, cookieJSON: n }, r, s, i);
}
async function ws(t, e, n, o, r, s) {
  let i = await O(t, o), a = new we(o, s, i.valueHash);
  return new Vt(o, a, i, { basisHash: t, type: 5, lastMutationIDs: e, cookieJSON: n }, An(i, o, s), r, s);
}
async function En(t, e, n, o, r) {
  var _a45, _b2;
  let s = [];
  for (let i of e.values()) {
    let { keyPrefix: a } = i.meta.definition;
    if (!a || n.startsWith(a)) {
      let l = await o();
      l !== void 0 && s.push(On(t, i.map, 1, n, l, i.meta.definition.jsonPointer, (_a45 = i.meta.definition.allowEmpty) != null ? _a45 : false)), r !== void 0 && s.push(On(t, i.map, 0, n, r, i.meta.definition.jsonPointer, (_b2 = i.meta.definition.allowEmpty) != null ? _b2 : false));
    }
  }
  await Promise.all(s);
}
function An(t, e, n) {
  let o = /* @__PURE__ */ new Map();
  for (let r of t.indexes)
    o.set(r.definition.name, new Vn(r, new we(e, n, r.valueHash)));
  return o;
}
async function xs(t, e, n, o, r, s, i) {
  let a = new we(e, i);
  for await (let l of n.scan(o)) {
    let u = l[0];
    if (!u.startsWith(o))
      break;
    await On(t, a, 0, u, l[1], r, s);
  }
  return a;
}
var Ot = h.string();
var Bo = h.string();
var bs = Q({ heartbeatTimestampMs: h.number(), headHash: de, mutationID: h.number(), lastServerAckdMutationID: h.number() });
var ll = Q({ heartbeatTimestampMs: h.number(), headHash: de, tempRefreshHash: de.nullable(), clientGroupID: Ot });
var Rs = Q({ heartbeatTimestampMs: h.number(), refreshHashes: pt(de), persistHash: de.nullable(), clientGroupID: Ot });
function ks(t) {
  return t.refreshHashes !== void 0;
}
function qo(t) {
  return t.clientGroupID !== void 0;
}
var Ps = "clients";
var ul = h.union(bs, ll, Rs);
function cl(t) {
  ne(t, ul);
}
function Wo(t) {
  ne(t, bs);
}
function $e(t) {
  ne(t, Rs);
}
function pl(t) {
  M(t);
  let e = /* @__PURE__ */ new Map();
  for (let n in t)
    if (X(t, n)) {
      let o = t[n];
      o !== void 0 && (cl(o), e.set(n, o));
    }
  return e;
}
function dl(t, e) {
  for (let n of t.values())
    ks(n) ? (n.refreshHashes.forEach(e.assertValidHash), n.persistHash && e.assertValidHash(n.persistHash)) : (e.assertValidHash(n.headHash), qo(n) && n.tempRefreshHash && e.assertValidHash(n.tempRefreshHash));
  return E(Object.fromEntries(t));
}
async function q(t) {
  let e = await t.getHead(Ps);
  return hl(e, t);
}
async function hl(t, e) {
  if (!t)
    return /* @__PURE__ */ new Map();
  let n = await e.getChunk(t);
  return pl(n == null ? void 0 : n.data);
}
var Y = class extends Error {
  constructor(e) {
    super(`Client state not found, id: ${e}`);
    __publicField(this, "name", "ClientStateNotFoundError");
    __publicField(this, "id");
    this.id = e;
  }
};
async function Ms(t, e) {
  if (!await $o(t, e))
    throw new Y(t);
}
async function $o(t, e) {
  return !!await Yo(t, e);
}
async function Yo(t, e) {
  return (await q(e)).get(t);
}
async function Et(t, e) {
  let n = await Yo(t, e);
  if (!n)
    throw new Y(t);
  return n;
}
function vs(t, e, n, o, r, s) {
  return he(n, async (i) => {
    async function a(m, S, D, I) {
      let C = jo(m, {}, S, D, I), w = i.createChunk(C, zo(C)), P = pe(), x = { heartbeatTimestampMs: Date.now(), refreshHashes: [w.hash], persistHash: null, clientGroupID: P }, V = new Map(l).set(t, x), R = { headHash: w.hash, mutatorNames: o, indexes: r, mutationIDs: {}, lastServerAckdMutationIDs: {}, disabled: false };
      return await Promise.all([i.putChunk(w), ye(V, i), Dt(P, R, i)]), await i.commit(), [x, w.hash, V, true];
    }
    let l = await q(i), u = await fl(i, o, r);
    if (u.type === Vs) {
      let { clientGroupID: m, headHash: S } = u, D = { clientGroupID: m, refreshHashes: [S], heartbeatTimestampMs: Date.now(), persistHash: null }, I = new Map(l).set(t, D);
      return await ye(I, i), await i.commit(), [D, S, I, false];
    }
    if (u.type === Ns) {
      let m = i.createChunk(Sn, []);
      await i.putChunk(m);
      let S = [];
      for (let [D, I] of Object.entries(r)) {
        let C = ps(D, I);
        S.push({ definition: C, valueHash: m.hash });
      }
      return a(null, null, m.hash, S);
    }
    y(u.type === Hs);
    let { snapshot: c } = u, d = [], { valueHash: p, indexes: f } = c, g = new F(i, s, p);
    for (let [m, S] of Object.entries(r)) {
      let { prefix: D = "", jsonPointer: I, allowEmpty: C = false } = S, w = { name: m, keyPrefix: D, jsonPointer: I, allowEmpty: C }, P = ml(f, w);
      if (P)
        d.push({ definition: w, valueHash: P.valueHash });
      else {
        let x = await xs(e, i, g, D, I, C, s);
        d.push({ definition: w, valueHash: await x.flush() });
      }
    }
    return a(c.meta.basisHash, c.meta.cookieJSON, c.valueHash, d);
  });
}
function ml(t, e) {
  return t.find((n) => cs(n.definition, e));
}
var Ns = 0;
var Hs = 1;
var Vs = 2;
async function fl(t, e, n) {
  let o, r, s = new Set(e), i = await ee(t);
  for (let [a, l] of i) {
    if (!l.disabled && Mo(s, l.mutatorNames) && un(n, l.indexes))
      return { type: Vs, clientGroupID: a, headHash: l.headHash };
    let u = await $(l.headHash, t);
    le(u);
    let { cookieJSON: c } = u.meta;
    (o === void 0 || Ae(c, o) > 0) && (o = c, r = u);
  }
  return r ? { type: Hs, snapshot: r } : { type: Ns };
}
function yl(t) {
  let e = [];
  for (let n of t.values())
    ks(n) ? (e.push(...n.refreshHashes), n.persistHash && e.push(n.persistHash)) : (e.push(n.headHash), qo(n) && n.tempRefreshHash && e.push(n.tempRefreshHash));
  return e;
}
async function Os(t, e) {
  let n = await Xo(t, e);
  if (n)
    return Re(n, e);
}
async function Xo(t, e) {
  let n = await Yo(t, e);
  if (!(!n || !qo(n)))
    return n.clientGroupID;
}
async function Tt(t, e, n) {
  let o = await q(n), r = new Map(o).set(t, e);
  return ye(r, n);
}
async function ye(t, e) {
  let n = dl(t, e), o = e.createChunk(n, yl(t));
  return await e.putChunk(o), await e.setHead(Ps, o.hash), o.hash;
}
var gl = 0;
var Dl = "replicache-dbs-v" + gl;
var Sl = "";
function Es() {
  return Sl + Dl;
}
var Fn = "dbs";
var Ts = "profileId";
function Il(t) {
  M(t);
  for (let [e, n] of Object.entries(t))
    k(e), Cl(n), y(e === n.name);
}
function Cl(t) {
  M(t), k(t.name), k(t.replicacheName), A(t.replicacheFormatVersion), k(t.schemaVersion), t.lastOpenedTimestampMS !== void 0 && A(t.lastOpenedTimestampMS);
}
var _e19, _t13, t_fn2, _a20;
var Ve = (_a20 = class {
  constructor(e) {
    __privateAdd(this, _t13);
    __privateAdd(this, _e19, void 0);
    __privateSet(this, _e19, e(Es()));
  }
  putDatabase(e) {
    return __privateMethod(this, _t13, t_fn2).call(this, { ...e, lastOpenedTimestampMS: Date.now() });
  }
  putDatabaseForTesting(e) {
    return __privateMethod(this, _t13, t_fn2).call(this, e);
  }
  clearDatabases() {
    return v(__privateGet(this, _e19), (e) => e.del(Fn));
  }
  deleteDatabases(e) {
    return v(__privateGet(this, _e19), async (n) => {
      let r = { ...await Zo(n) };
      for (let s of e)
        delete r[s];
      await n.put(Fn, r);
    });
  }
  getDatabases() {
    return H(__privateGet(this, _e19), Zo);
  }
  close() {
    return __privateGet(this, _e19).close();
  }
  getProfileID() {
    return v(__privateGet(this, _e19), async (e) => {
      let n = await e.get(Ts);
      return n === void 0 && (n = `p${pe().replace(/-/g, "")}`, await e.put(Ts, n)), k(n), n;
    });
  }
}, _e19 = new WeakMap(), _t13 = new WeakSet(), t_fn2 = function(e) {
  return v(__privateGet(this, _e19), async (n) => {
    let r = { ...await Zo(n), [e.name]: e };
    return await n.put(Fn, r), r;
  });
}, _a20);
async function Zo(t) {
  let e = await t.get(Fn);
  return e || (e = E({})), Il(e), e;
}
var wl = 12 * 60 * 60 * 1e3;
var xl = 30 * 24 * 60 * 60 * 1e3;
var bl = 14 * 24 * 60 * 60 * 1e3;
var Rl = 5 * 60 * 1e3;
function Fs(t, e, n) {
  let o = true;
  ie("CollectIDBDatabases", async () => {
    await kl(t, Date.now(), xl, bl);
  }, () => o ? (o = false, Rl) : wl, e, n);
}
async function kl(t, e, n, o, r = Pl) {
  let s = await t.getDatabases(), i = Object.values(s), l = (await Promise.all(i.map(async (c) => [c.name, await Ml(c, e, n, o, r)]))).filter((c) => c[1]).map((c) => c[0]), { errors: u } = await js(t, l);
  if (u.length)
    throw u[0];
}
async function Ls(t, e) {
  await ko(t), await e.deleteDatabases([t]);
}
async function js(t, e) {
  let n = await Promise.allSettled(e.map(async (s) => (await Ls(s, t), s))), o = [], r = [];
  for (let s of n)
    s.status === "fulfilled" ? o.push(s.value) : r.push(s.reason);
  return { dropped: o, errors: r };
}
function Pl(t) {
  let e = new Se(t);
  return new Ie(e, z, B);
}
async function Ml(t, e, n, o, r) {
  if (t.replicacheFormatVersion > 7)
    return false;
  if (t.lastOpenedTimestampMS !== void 0) {
    let a = t.replicacheFormatVersion >= 5;
    return e - t.lastOpenedTimestampMS < (a ? o : n) ? false : a ? (y(t.replicacheFormatVersion === 5 || t.replicacheFormatVersion === 6 || t.replicacheFormatVersion === 7), !await Vl(r(t.name))) : true;
  }
  let s = r(t.name), i = await H(s, q);
  return await s.close(), vl(i, e, n);
}
function vl(t, e, n) {
  for (let o of t.values())
    if (e - o.heartbeatTimestampMs < n)
      return false;
  return true;
}
async function Vl(t) {
  let e = await H(t, ee);
  for (let n of e.values())
    if (pn(n))
      return true;
  return false;
}
function Js(t, e, n) {
  return t ? new Qo(t, e, n) : new er();
}
var _e20, _t14, _n10, _o7, _r5, _s4, s_fn3, _a21, a_fn, _a22;
var Qo = (_a22 = class {
  constructor(e, n, o) {
    __privateAdd(this, _s4);
    __privateAdd(this, _a21);
    __privateAdd(this, _e20, void 0);
    __privateAdd(this, _t14, void 0);
    __privateAdd(this, _n10, 0);
    __publicField(this, "visibilityState");
    __privateAdd(this, _o7, /* @__PURE__ */ new Set());
    __privateAdd(this, _r5, () => {
      __privateGet(this, _e20).visibilityState === "visible" ? (clearTimeout(__privateGet(this, _n10)), __privateMethod(this, _s4, s_fn3).call(this, "visible")) : __privateSet(this, _n10, setTimeout(() => {
        __privateMethod(this, _s4, s_fn3).call(this, "hidden");
      }, __privateGet(this, _t14)));
    });
    __privateSet(this, _e20, e), __privateSet(this, _t14, n), this.visibilityState = e.visibilityState, __privateGet(this, _e20).addEventListener("visibilitychange", __privateGet(this, _r5), { signal: o });
  }
  waitForVisible() {
    return __privateMethod(this, _a21, a_fn).call(this, "visible");
  }
  waitForHidden() {
    return __privateMethod(this, _a21, a_fn).call(this, "hidden");
  }
}, _e20 = new WeakMap(), _t14 = new WeakMap(), _n10 = new WeakMap(), _o7 = new WeakMap(), _r5 = new WeakMap(), _s4 = new WeakSet(), s_fn3 = function(e) {
  if (e !== this.visibilityState) {
    this.visibilityState = e;
    for (let n of __privateGet(this, _o7)) {
      let { resolve: o, state: r } = n;
      r === e && (o(), __privateGet(this, _o7).delete(n));
    }
  }
}, _a21 = new WeakSet(), a_fn = function(e) {
  if (this.visibilityState === e)
    return Promise.resolve();
  let { promise: n, resolve: o } = resolver();
  return __privateGet(this, _o7).add({ resolve: o, state: e }), n;
}, _a22);
var El = Promise.resolve();
var Tl = new Promise(() => {
});
var er = class {
  constructor() {
    __publicField(this, "visibilityState", "visible");
  }
  waitForVisible() {
    return El;
  }
  waitForHidden() {
    return Tl;
  }
};
function At() {
  return typeof document < "u" ? document : void 0;
}
var Ln = class {
  constructor(e, n) {
    __publicField(this, "rep");
    __publicField(this, "invokeSend");
    __publicField(this, "maxConnections", 1);
    this.rep = e, this.invokeSend = n;
  }
  get maxDelayMs() {
    return this.rep.requestOptions.maxDelayMs;
  }
  get minDelayMs() {
    return this.rep.requestOptions.minDelayMs;
  }
};
var jn = class extends Ln {
  constructor() {
    super(...arguments);
    __publicField(this, "debounceDelay", 0);
  }
  get watchdogTimer() {
    return this.rep.pullInterval;
  }
};
var zn = class extends Ln {
  constructor() {
    super(...arguments);
    __publicField(this, "watchdogTimer", null);
  }
  get debounceDelay() {
    return this.rep.pushDelay;
  }
};
var Us = 30;
var _s5 = 6e4;
var _e21, _t15, _n11, _o8, _r6, _s6, _a23, _l2, _c2, _h2, h_fn2, _u2, u_fn2, _a24;
var Ft = (_a24 = class {
  constructor(e, n, o) {
    __privateAdd(this, _h2);
    __privateAdd(this, _u2);
    __privateAdd(this, _e21, resolver());
    __privateAdd(this, _t15, resolver());
    __privateAdd(this, _n11, resolver());
    __privateAdd(this, _o8, void 0);
    __privateAdd(this, _r6, false);
    __privateAdd(this, _s6, 0);
    __privateAdd(this, _a23, void 0);
    __privateAdd(this, _l2, void 0);
    __privateAdd(this, _c2, void 0);
    __privateSet(this, _a23, e), __privateSet(this, _o8, n), __privateSet(this, _l2, o), this.run();
  }
  close() {
    __privateSet(this, _r6, true), __privateGet(this, _s6) > 0 && __privateGet(this, _n11).resolve({ error: Gs() });
  }
  async send(e) {
    var _a45, _b2, _c6;
    if (__privateGet(this, _r6))
      return { error: Gs() };
    __privateWrapper(this, _s6)._++, (_b2 = (_a45 = __privateGet(this, _a23)).debug) == null ? void 0 : _b2.call(_a45, "send", e), e ? __privateGet(this, _t15).resolve() : await ((_c6 = __privateGet(this, _l2)) == null ? void 0 : _c6.waitForVisible()), __privateGet(this, _e21).resolve();
    let n = await __privateGet(this, _n11).promise;
    return __privateWrapper(this, _s6)._--, n;
  }
  async run() {
    let e = [], n = resolver(), o, r = 0, s = __privateGet(this, _o8), { debug: i } = __privateGet(this, _a23), a = 0;
    i == null ? void 0 : i("Starting connection loop");
    let l = (u) => Promise.race([__privateGet(this, _t15).promise, ce(u)]);
    for (; !__privateGet(this, _r6); ) {
      i == null ? void 0 : i(tr(e) ? "Last request failed. Trying again" : "Waiting for a send");
      let u = [__privateGet(this, _e21).promise], c = s.watchdogTimer;
      if (c !== null && u.push(ce(c)), await Promise.race(u), __privateGet(this, _r6) || (i == null ? void 0 : i("Waiting for debounce"), await l(s.debounceDelay), __privateGet(this, _r6)))
        break;
      if (i == null ? void 0 : i("debounced"), __privateSet(this, _e21, resolver()), r >= s.maxConnections) {
        if (i == null ? void 0 : i("Too many request in flight. Waiting until one finishes..."), await __privateMethod(this, _u2, u_fn2).call(this), __privateGet(this, _r6))
          break;
        i == null ? void 0 : i("...finished");
      }
      r > 0 || tr(e) ? (a = Fl(a, s, e), i == null ? void 0 : i(tr(e) ? "Last connection errored. Sleeping for" : "More than one outstanding connection (" + r + "). Sleeping for", a, "ms")) : a = 0;
      let d = Math.min(s.maxDelayMs, Math.max(s.minDelayMs, a));
      if (o !== void 0) {
        let p = Date.now() - o;
        if (d > p && (await Promise.race([l(d - p), n.promise]), __privateGet(this, _r6)))
          break;
      }
      r++, (async () => {
        let p = Date.now(), f, g;
        try {
          o = p, i == null ? void 0 : i("Sending request"), __privateSet(this, _t15, resolver()), f = await s.invokeSend(), i == null ? void 0 : i("Send returned", f);
        } catch (S) {
          i == null ? void 0 : i("Send failed", S), g = S, f = false;
        }
        if (__privateGet(this, _r6)) {
          i == null ? void 0 : i("Closed after invokeSend");
          return;
        }
        i == null ? void 0 : i("Request done", { duration: Date.now() - p, ok: f }), e.push({ duration: Date.now() - p, ok: f }), jl(e) && (n.resolve(), n = resolver()), r--, __privateMethod(this, _h2, h_fn2).call(this);
        let m = __privateGet(this, _n11);
        __privateSet(this, _n11, resolver()), g ? m.resolve({ error: g }) : m.resolve(void 0), f || __privateGet(this, _e21).resolve();
      })();
    }
  }
}, _e21 = new WeakMap(), _t15 = new WeakMap(), _n11 = new WeakMap(), _o8 = new WeakMap(), _r6 = new WeakMap(), _s6 = new WeakMap(), _a23 = new WeakMap(), _l2 = new WeakMap(), _c2 = new WeakMap(), _h2 = new WeakSet(), h_fn2 = function() {
  if (__privateGet(this, _c2)) {
    let e = __privateGet(this, _c2);
    __privateSet(this, _c2, void 0), e();
  }
}, _u2 = new WeakSet(), u_fn2 = function() {
  let { promise: e, resolve: n } = resolver();
  return __privateSet(this, _c2, n), e;
}, _a24);
var Al = 9;
function Gs() {
  return new Error("Closed");
}
function Fl(t, e, n) {
  let { length: o } = n;
  if (o === 0)
    return t;
  let { ok: r } = n[n.length - 1], { maxConnections: s, minDelayMs: i } = e;
  if (!r)
    return t === 0 ? i : t * 2;
  if (o > 1) {
    let l = n[n.length - 2];
    for (; n.length > Al; )
      n.shift();
    if (r && !l.ok)
      return i;
  }
  return Ll(n.filter(({ ok: l }) => l).map(({ duration: l }) => l)) / s | 0;
}
function Ll(t) {
  t.sort();
  let { length: e } = t, n = e >> 1;
  return e % 2 === 1 ? t[n] : (t[n - 1] + t[n]) / 2;
}
function tr(t) {
  return t.length > 0 && !t[t.length - 1].ok;
}
function jl(t) {
  return t.length > 1 && !t[t.length - 2].ok && t[t.length - 1].ok;
}
var _e22, _t16, _n12, _o9, _r7, _a25;
var Oe = (_a25 = class {
  constructor(e, n, o, r, s = fe) {
    __privateAdd(this, _e22, new RWLock());
    __privateAdd(this, _t16, /* @__PURE__ */ new Map());
    __privateAdd(this, _n12, void 0);
    __privateAdd(this, _o9, void 0);
    __privateAdd(this, _r7, void 0);
    __publicField(this, "t", /* @__PURE__ */ new Map());
    __publicField(this, "n");
    __publicField(this, "h", /* @__PURE__ */ new Map());
    __publicField(this, "m", /* @__PURE__ */ new Map());
    this.n = new or(n, s, this.h, this.m), __privateSet(this, _n12, e), __privateSet(this, _o9, o), __privateSet(this, _r7, r);
  }
  async read() {
    let e = await __privateGet(this, _e22).read();
    return new Jn(__privateGet(this, _t16), this.t, this.n, __privateGet(this, _n12), e, __privateGet(this, _r7));
  }
  async write() {
    let e = await __privateGet(this, _e22).write();
    return new nr(__privateGet(this, _t16), this.t, this.n, __privateGet(this, _n12), this.h, this.m, e, __privateGet(this, _o9), __privateGet(this, _r7));
  }
  close() {
    return U;
  }
  isCached(e) {
    return this.n.getWithoutUpdatingLRU(e) !== void 0;
  }
  withSuspendedSourceCacheEvictsAndDeletes(e) {
    return this.n.withSuspendedEvictsAndDeletes(e);
  }
}, _e22 = new WeakMap(), _t16 = new WeakMap(), _n12 = new WeakMap(), _o9 = new WeakMap(), _r7 = new WeakMap(), _a25);
var _e23, _t17, _n13, _a26;
var Jn = (_a26 = class {
  constructor(e, n, o, r, s, i) {
    __publicField(this, "u");
    __publicField(this, "t");
    __publicField(this, "n");
    __publicField(this, "f");
    __privateAdd(this, _e23, void 0);
    __privateAdd(this, _t17, void 0);
    __privateAdd(this, _n13, false);
    __publicField(this, "assertValidHash");
    this.u = e, this.t = n, this.n = o, this.f = r, __privateSet(this, _t17, s), this.assertValidHash = i;
  }
  isMemOnlyChunkHash(e) {
    return this.t.has(e);
  }
  async hasChunk(e) {
    return await this.getChunk(e) !== void 0;
  }
  async getChunk(e) {
    let n = this.t.get(e);
    if (n !== void 0)
      return n;
    let o = this.n.get(e);
    return o === void 0 && (o = await (await this.y()).getChunk(e), o !== void 0 && this.n.put(o)), o;
  }
  mustGetChunk(e) {
    return an(this, e);
  }
  getHead(e) {
    return Promise.resolve(this.u.get(e));
  }
  release() {
    var _a45;
    __privateGet(this, _n13) || (__privateGet(this, _t17).call(this), (_a45 = __privateGet(this, _e23)) == null ? void 0 : _a45.then((e) => e.release()).catch((e) => {
    }), __privateSet(this, _n13, true));
  }
  get closed() {
    return __privateGet(this, _n13);
  }
  y() {
    return __privateGet(this, _e23) || __privateSet(this, _e23, this.f.read()), __privateGet(this, _e23);
  }
}, _e23 = new WeakMap(), _t17 = new WeakMap(), _n13 = new WeakMap(), _a26);
var _e24, _t18, _n14, _o10, _r8, r_fn2, _a27;
var nr = (_a27 = class extends Jn {
  constructor(e, n, o, r, s, i, a, l, u) {
    super(e, n, o, r, a, u);
    __privateAdd(this, _r8);
    __privateAdd(this, _e24, void 0);
    __privateAdd(this, _t18, void 0);
    __privateAdd(this, _n14, void 0);
    __publicField(this, "i", /* @__PURE__ */ new Map());
    __publicField(this, "r", /* @__PURE__ */ new Map());
    __publicField(this, "s", /* @__PURE__ */ new Map());
    __privateAdd(this, _o10, /* @__PURE__ */ new Set());
    __publicField(this, "createChunk", (e, n) => {
      let o = on(e, n, __privateGet(this, _n14));
      return __privateGet(this, _o10).add(o.hash), o;
    });
    __privateSet(this, _e24, s), __privateSet(this, _t18, i), __privateSet(this, _n14, l);
  }
  putChunk(e, n) {
    let { hash: o, meta: r } = e;
    if (this.assertValidHash(o), r.length > 0)
      for (let s of r)
        this.assertValidHash(s);
    return __privateGet(this, _o10).has(o) || this.isMemOnlyChunkHash(o) ? this.r.set(o, e) : this.s.set(o, { chunk: e, size: n != null ? n : -1 }), U;
  }
  async setHead(e, n) {
    await __privateMethod(this, _r8, r_fn2).call(this, e, n);
  }
  async removeHead(e) {
    await __privateMethod(this, _r8, r_fn2).call(this, e, void 0);
  }
  isMemOnlyChunkHash(e) {
    return this.r.has(e) || super.isMemOnlyChunkHash(e);
  }
  async getChunk(e) {
    let n = this.r.get(e);
    if (n !== void 0)
      return n;
    let o = this.t.get(e);
    if (o !== void 0)
      return o;
    let r = this.s.get(e);
    if (r !== void 0)
      return r.chunk;
    let s = this.n.get(e);
    return s === void 0 && (s = await (await this.y()).getChunk(e), s !== void 0 && this.s.set(s.hash, { chunk: s, size: -1 })), s;
  }
  getHead(e) {
    let n = this.i.get(e);
    return n ? Promise.resolve(n.new) : super.getHead(e);
  }
  async commit() {
    let e = new Set(St(this.r.keys(), this.s.keys())), n = await rn(this.i.values(), e, this);
    for (let [o, r] of n)
      if (this.isMemOnlyChunkHash(o)) {
        if (r === 0)
          __privateGet(this, _e24).delete(o), this.t.delete(o), __privateGet(this, _t18).delete(o);
        else {
          __privateGet(this, _e24).set(o, r);
          let s = this.r.get(o);
          s && (__privateGet(this, _t18).set(o, s.meta), this.t.set(o, s));
        }
        n.delete(o);
      }
    this.n.updateForCommit(this.s, n);
    for (let [o, r] of this.i)
      r.new ? this.u.set(o, r.new) : this.u.delete(o);
    this.r.clear(), this.s.clear(), this.i.clear(), this.release();
  }
  getRefCount(e) {
    return __privateGet(this, _e24).get(e);
  }
  getRefs(e) {
    let n = this.r.get(e);
    if (n)
      return n.meta;
    let o = this.t.get(e);
    if (o)
      return o.meta;
    let r = this.s.get(e);
    return r !== void 0 ? r.chunk.meta : __privateGet(this, _t18).get(e);
  }
  areRefsCounted(e) {
    return __privateGet(this, _t18).has(e);
  }
  chunksPersisted(e) {
    let n = [];
    for (let o of e) {
      let r = this.t.get(o);
      r && (this.t.delete(o), n.push(r));
    }
    this.n.persisted(n);
  }
}, _e24 = new WeakMap(), _t18 = new WeakMap(), _n14 = new WeakMap(), _o10 = new WeakMap(), _r8 = new WeakSet(), r_fn2 = async function(e, n) {
  let o = await this.getHead(e), r = this.i.get(e);
  r === void 0 ? this.i.set(e, { new: n, old: o }) : r.new = n;
}, _a27);
var _e25, _t19, _n15, _o11, _r9, _s7, _a28, _l3, l_fn, _c3, c_fn2, _h3, h_fn3, _u3, u_fn3, _a29;
var or = (_a29 = class {
  constructor(e, n, o, r) {
    __privateAdd(this, _l3);
    __privateAdd(this, _c3);
    __privateAdd(this, _h3);
    __privateAdd(this, _u3);
    __privateAdd(this, _e25, void 0);
    __privateAdd(this, _t19, void 0);
    __privateAdd(this, _n15, void 0);
    __privateAdd(this, _o11, void 0);
    __privateAdd(this, _r9, 0);
    __privateAdd(this, _s7, false);
    __privateAdd(this, _a28, []);
    __publicField(this, "cacheEntries", /* @__PURE__ */ new Map());
    __privateSet(this, _e25, e), __privateSet(this, _t19, n), __privateSet(this, _n15, o), __privateSet(this, _o11, r);
  }
  get(e) {
    let n = this.cacheEntries.get(e);
    return n && (this.cacheEntries.delete(e), this.cacheEntries.set(e, n)), n == null ? void 0 : n.chunk;
  }
  getWithoutUpdatingLRU(e) {
    var _a45;
    return (_a45 = this.cacheEntries.get(e)) == null ? void 0 : _a45.chunk;
  }
  put(e) {
    let { hash: n } = e, o = this.cacheEntries.get(n);
    if (o) {
      this.cacheEntries.delete(n), this.cacheEntries.set(n, o);
      return;
    }
    let r = __privateGet(this, _n15).get(n);
    if (!(r === void 0 || r < 1) && __privateMethod(this, _c3, c_fn2).call(this, e)) {
      if (!__privateGet(this, _o11).has(n)) {
        for (let s of e.meta)
          __privateGet(this, _n15).set(s, (__privateGet(this, _n15).get(s) || 0) + 1);
        __privateGet(this, _o11).set(n, e.meta);
      }
      __privateMethod(this, _l3, l_fn).call(this);
    }
  }
  updateForCommit(e, n) {
    for (let [o, r] of n)
      if (r === 0)
        __privateGet(this, _s7) ? (__privateGet(this, _n15).set(o, 0), __privateGet(this, _a28).push(o)) : __privateMethod(this, _u3, u_fn3).call(this, o);
      else {
        __privateGet(this, _n15).set(o, r);
        let s = e.get(o);
        if (s) {
          let { chunk: i, size: a } = s, l = this.cacheEntries.get(o);
          l ? (this.cacheEntries.delete(o), this.cacheEntries.set(o, l)) : (__privateMethod(this, _c3, c_fn2).call(this, i, a !== -1 ? a : void 0), __privateGet(this, _o11).set(o, i.meta));
        }
      }
    __privateMethod(this, _l3, l_fn).call(this);
  }
  persisted(e) {
    for (let n of e)
      __privateMethod(this, _c3, c_fn2).call(this, n);
    __privateMethod(this, _l3, l_fn).call(this);
  }
  async withSuspendedEvictsAndDeletes(e) {
    __privateSet(this, _s7, true);
    try {
      return await e();
    } finally {
      __privateSet(this, _s7, false);
      for (let n of __privateGet(this, _a28))
        __privateGet(this, _n15).get(n) === 0 && __privateMethod(this, _u3, u_fn3).call(this, n);
      __privateMethod(this, _l3, l_fn).call(this);
    }
  }
}, _e25 = new WeakMap(), _t19 = new WeakMap(), _n15 = new WeakMap(), _o11 = new WeakMap(), _r9 = new WeakMap(), _s7 = new WeakMap(), _a28 = new WeakMap(), _l3 = new WeakSet(), l_fn = function() {
  if (!__privateGet(this, _s7))
    for (let e of this.cacheEntries.values()) {
      if (__privateGet(this, _r9) <= __privateGet(this, _e25))
        break;
      __privateMethod(this, _h3, h_fn3).call(this, e);
    }
}, _c3 = new WeakSet(), c_fn2 = function(e, n) {
  let o = n != null ? n : __privateGet(this, _t19).call(this, e);
  return o > __privateGet(this, _e25) ? false : (__privateSet(this, _r9, __privateGet(this, _r9) + o), this.cacheEntries.set(e.hash, { chunk: e, size: o }), true);
}, _h3 = new WeakSet(), h_fn3 = function(e) {
  let { hash: n } = e.chunk;
  __privateSet(this, _r9, __privateGet(this, _r9) - e.size), this.cacheEntries.delete(n);
}, _u3 = new WeakSet(), u_fn3 = function(e) {
  __privateGet(this, _n15).delete(e), __privateGet(this, _o11).delete(e);
  let n = this.cacheEntries.get(e);
  n && (__privateSet(this, _r9, __privateGet(this, _r9) - n.size), this.cacheEntries.delete(e));
}, _a29);
function Ye(t) {
  return t.indexName !== void 0;
}
function Lt(t) {
  return typeof t == "string" ? [t] : t;
}
function Ks(t) {
  if (!t)
    return {};
  let e, n, o, r;
  return t.start && ({ key: e, exclusive: n } = t.start, t.indexName ? typeof e == "string" ? r = e : (r = e[0], o = e[1]) : o = e), { prefix: t.prefix, startSecondaryKey: r, startKey: o, startExclusive: n, limit: t.limit, indexName: t.indexName };
}
var jt = class extends Error {
  constructor() {
    super("Transaction is closed");
  }
};
function xe(t) {
  if (t.closed)
    throw new jt();
}
function rr(t) {
  return t.closed ? Promise.reject(new jt()) : void 0;
}
var _e26, _t20, _n16, _o12, _r10, r_fn3, _a30;
var Xe = (_a30 = class {
  constructor(e, n, o, r) {
    __privateAdd(this, _r10);
    __privateAdd(this, _e26, void 0);
    __privateAdd(this, _t20, void 0);
    __privateAdd(this, _n16, void 0);
    __privateAdd(this, _o12, void 0);
    __privateSet(this, _e26, e), __privateSet(this, _t20, n), __privateSet(this, _n16, o), __privateSet(this, _o12, r);
  }
  [Symbol.asyncIterator]() {
    return this.values();
  }
  values() {
    return new zt(__privateMethod(this, _r10, r_fn3).call(this, (e) => e[1]));
  }
  keys() {
    return new zt(__privateMethod(this, _r10, r_fn3).call(this, (e) => e[0]));
  }
  entries() {
    return new zt(__privateMethod(this, _r10, r_fn3).call(this, (e) => [e[0], e[1]]));
  }
  toArray() {
    return this.values().toArray();
  }
}, _e26 = new WeakMap(), _t20 = new WeakMap(), _n16 = new WeakMap(), _o12 = new WeakMap(), _r10 = new WeakSet(), r_fn3 = function(e) {
  return Jl(e, __privateGet(this, _e26), __privateGet(this, _t20), __privateGet(this, _n16), __privateGet(this, _o12));
}, _a30);
var _e27, _a31;
var zt = (_a31 = class {
  constructor(e) {
    __privateAdd(this, _e27, void 0);
    __privateSet(this, _e27, e);
  }
  next() {
    return __privateGet(this, _e27).next();
  }
  [Symbol.asyncIterator]() {
    return __privateGet(this, _e27)[Symbol.asyncIterator]();
  }
  toArray() {
    return Hn(__privateGet(this, _e27));
  }
}, _e27 = new WeakMap(), _a31);
async function* Jl(t, e, n, o, r) {
  var _a45;
  xe(o);
  let { limit: s = 1 / 0 } = n, { prefix: i = "" } = n, a = (_a45 = n.start) == null ? void 0 : _a45.exclusive, l = Ye(n);
  for await (let u of e) {
    let c = u[0];
    if (!(l ? c[0] : c).startsWith(i))
      return;
    if (a) {
      if (a = true, l) {
        if (Gl(c, n.start.key))
          continue;
      } else if (Ul(c, n.start.key))
        continue;
    }
    if (yield t(u), --s === 0 && !l) {
      r(c);
      return;
    }
  }
}
function Gl(t, e) {
  let [n, o] = Lt(e), [r, s] = Lt(t);
  return r !== n ? false : o === void 0 ? true : s === o;
}
function Ul(t, e) {
  return t === e;
}
function Bs(t) {
  let { prefix: e, start: n } = t, o = "";
  if (e !== void 0 && (o = _o5(e, void 0)), !n)
    return o;
  let { key: r } = n, [s, i] = Lt(r), a = _o5(s, i);
  return Pe(a, o) ? a : o;
}
var Bl = 0;
var Jt = class {
  constructor(e, n, o, r = "openReadTransaction") {
    __publicField(this, "clientID");
    __publicField(this, "dbtx");
    __publicField(this, "d");
    __publicField(this, "location");
    __publicField(this, "environment");
    this.clientID = e, this.dbtx = n, this.d = o.withContext(r).withContext("txid", Bl++), this.environment = "client", this.location = "client";
  }
  get(e) {
    return rr(this.dbtx) || this.dbtx.get(e);
  }
  async has(e) {
    return xe(this.dbtx), this.dbtx.has(e);
  }
  async isEmpty() {
    return xe(this.dbtx), this.dbtx.isEmpty();
  }
  scan(e) {
    return qs(e, this.dbtx, ql);
  }
};
function ql(t) {
}
function qs(t, e, n) {
  let o = Wl(e, t);
  return $l(o, t != null ? t : {}, e, n);
}
var _e28, _t21, _n17, _a32;
var Gn = (_a32 = class {
  constructor(e) {
    __privateAdd(this, _e28, /* @__PURE__ */ new Set());
    __privateAdd(this, _t21, []);
    __privateAdd(this, _n17, void 0);
    __privateSet(this, _n17, e);
  }
  get environment() {
    return __privateGet(this, _n17).location;
  }
  get location() {
    return __privateGet(this, _n17).location;
  }
  get clientID() {
    return __privateGet(this, _n17).clientID;
  }
  isEmpty() {
    return __privateGet(this, _t21).push({ options: {} }), __privateGet(this, _n17).isEmpty();
  }
  get(e) {
    return __privateGet(this, _e28).add(e), __privateGet(this, _n17).get(e);
  }
  has(e) {
    return __privateGet(this, _e28).add(e), __privateGet(this, _n17).has(e);
  }
  scan(e) {
    let n = { options: Ks(e), inclusiveLimitKey: void 0 };
    return __privateGet(this, _t21).push(n), qs(e, __privateGet(this, _n17).dbtx, (o) => {
      n.inclusiveLimitKey = o;
    });
  }
  get keys() {
    return __privateGet(this, _e28);
  }
  get scans() {
    return __privateGet(this, _t21);
  }
}, _e28 = new WeakMap(), _t21 = new WeakMap(), _n17 = new WeakMap(), _a32);
var Ze = class extends Jt {
  constructor(e, n, o, r, s, i = "openWriteTransaction") {
    super(e, r, s, i);
    __publicField(this, "reason");
    __publicField(this, "mutationID");
    this.mutationID = n, this.reason = o;
  }
  put(e, n) {
    return this.set(e, n);
  }
  async set(e, n) {
    xe(this.dbtx), await this.dbtx.put(this.d, e, E(n));
  }
  del(e) {
    var _a45;
    return (_a45 = rr(this.dbtx)) != null ? _a45 : this.dbtx.del(this.d, e);
  }
};
function Wl(t, e) {
  return e && Ye(e) ? Yl(t, e) : t.map.scan(sr(e));
}
function sr(t) {
  if (!t)
    return "";
  let { prefix: e = "", start: n } = t;
  return n && Pe(n.key, e) ? n.key : e;
}
function $l(t, e, n, o) {
  return new Xe(t, e, n, o);
}
async function* Yl(t, e) {
  let n = t.getMapForIndex(e.indexName);
  for await (let o of n.scan(Bs(e)))
    yield [qe(o[0]), o[1]];
}
async function Ws(t, e, n, o, r, s, i) {
  var _a45;
  let a = t.meta, l = a.mutatorName;
  Be(a) && y(a.clientID === s, "mutationClientID must match clientID of LocalMeta");
  let u = o[l];
  u || ((_a45 = r.error) == null ? void 0 : _a45.call(r, `Cannot rebase unknown mutator ${l}`));
  let c = u || (async () => {
  }), d = a.mutatorArgsJSON, f = await (await O(n, e)).getNextMutationID(s, e);
  if (f !== a.mutationID)
    throw new Error(`Inconsistent mutation ID: original: ${a.mutationID}, next: ${f} - mutationClientID: ${s} mutatorName: ${l}`);
  i >= 5 && Lo(a);
  let g = await Tn(n, l, d, t.chunk.hash, e, a.timestamp, s, i), m = new Ze(s, await g.getMutationID(), "rebase", g, r);
  return await c(m, d), g;
}
async function Un(t, e, n, o, r, s, i) {
  return (await Ws(t, e, n, o, r, s, i)).putCommit();
}
async function $s(t, e, n, o, r, s, i, a) {
  return (await Ws(t, e, n, r, s, i, a)).commit(o);
}
function Ys(t, e) {
  return H(t, async (n) => {
    let o = await n.getHead(e);
    if (o === void 0)
      throw new Error(`No head found for ${e}`);
    return o;
  });
}
function Xs(t) {
  async function e(n, o) {
    let [r, s] = await Xt(t.pushURL, t.auth, o, n);
    if (!r)
      return { httpRequestInfo: s };
    let i = { httpRequestInfo: s }, a;
    try {
      a = await r.json();
    } catch (e2) {
      return i;
    }
    return (G(a) || K(a)) && (i.response = a), i;
  }
  return Zs.add(e), e;
}
var Zs = /* @__PURE__ */ new WeakSet();
function Qs(t) {
  return Zs.has(t);
}
function _n18(t) {
  return t instanceof Error ? t : new Error(String(t));
}
async function ir(t, e, n) {
  for (let o of n)
    switch (o.op) {
      case "put": {
        await e.put(t, o.key, E(o.value));
        break;
      }
      case "del":
        await e.del(t, o.key);
        break;
      case "clear":
        await e.clear();
        break;
    }
}
var Ee = class extends Error {
  constructor(e) {
    super("Failed to pull");
    __publicField(this, "name", "PullError");
    __publicField(this, "causedBy");
    this.causedBy = e;
  }
};
var Te = "sync";
var Zl = 0;
var ei = 1;
function Ql(t) {
  return t.pullVersion === ei;
}
async function ti(t, e, n, o, r, s, i, a, l = true) {
  let [u, c] = await H(s, async (m) => {
    let S = await m.getHead(N);
    if (!S)
      throw new Error("Internal no main head found");
    let D = await $(S, m), C = D.meta.cookieJSON;
    return [await D.getMutationID(e, m), C];
  }), d = { profileID: t, clientID: e, cookie: c, lastMutationID: u, pullVersion: Zl, schemaVersion: n }, { response: p, httpRequestInfo: f } = await ni(a, o, d, r);
  if (!p)
    return { httpRequestInfo: f, syncHead: T };
  if (!l || io(p))
    return { httpRequestInfo: f, pullResponse: p, syncHead: T };
  let g = await eu(a, s, c, p, e, i);
  if (g.type === 2)
    throw new Error("Overlapping sync");
  return { httpRequestInfo: f, pullResponse: p, syncHead: g.type === 0 ? g.syncHead : T };
}
async function Kn(t, e, n, o, r, s, i, a, l, u = true) {
  let c = await H(i, async (m) => {
    let S = await m.getHead(N);
    if (!S)
      throw new Error("Internal no main head found");
    let I = (await $(S, m)).meta;
    return Pt(I), I.cookieJSON;
  }), d = { profileID: t, clientGroupID: n, cookie: c, pullVersion: ei, schemaVersion: o }, { response: p, httpRequestInfo: f } = await ni(l, r, d, s);
  if (!p)
    return { httpRequestInfo: f, syncHead: T };
  if (!u || io(p))
    return { httpRequestInfo: f, pullResponse: p, syncHead: T };
  let g = await lr(l, i, c, p, e, a);
  return { httpRequestInfo: f, pullResponse: p, syncHead: g.type === 0 ? g.syncHead : T };
}
async function ni(t, e, n, o) {
  var _a45, _b2;
  (_a45 = t.debug) == null ? void 0 : _a45.call(t, "Starting pull...");
  let r = Date.now();
  try {
    let s = await e(n, o);
    return (_b2 = t.debug) == null ? void 0 : _b2.call(t, `...Pull ${s.response ? "complete" : "failed"} in `, Date.now() - r, "ms"), Ql(n) ? jr(s) : zr(s), s;
  } catch (s) {
    throw new Ee(_n18(s));
  }
}
function eu(t, e, n, o, r, s) {
  return he(e, async (i) => {
    var _a45;
    y(s <= 4);
    let a = i, l = await a.getHead(N);
    if (l === void 0)
      throw new Error("Main head disappeared");
    let u = await $(l, a), [c, d] = vn(u, r);
    if (!W(n, d))
      return { type: 2 };
    if (o.lastMutationID < c)
      throw new Error(ar("lastMutationID", o.lastMutationID, c));
    let p = E((_a45 = o.cookie) != null ? _a45 : null);
    if (o.patch.length === 0 && o.lastMutationID === c && W(p, d))
      return { type: 1 };
    let f = await Nn(l, a), g;
    for (let D of f)
      if (await D.getMutationID(r, a) <= o.lastMutationID) {
        g = D;
        break;
      }
    if (!g)
      throw new Error("Internal invalid chain");
    let m = await Cs(u.chunk.hash, o.lastMutationID, p, i, An(g, i, s), r, s);
    await ir(t, m, o.patch);
    let S = new F(a, s, g.valueHash);
    for await (let D of m.map.diff(S))
      await En(t, m.indexes, D.key, () => Promise.resolve(D.oldValue), D.newValue);
    return { type: 0, syncHead: await m.commit(Te) };
  });
}
function ar(t, e, n) {
  return `Received ${t} ${e} is < than last snapshot ${t} ${n}; ignoring client view`;
}
function lr(t, e, n, o, r, s) {
  return he(e, async (i) => {
    var _a45;
    let a = i, l = await a.getHead(N);
    if (l === void 0)
      throw new Error("Main head disappeared");
    let u = await $(l, a), c = u.meta;
    Pt(c);
    let d = c.cookieJSON;
    if (!W(n, d))
      return (_a45 = t.debug) == null ? void 0 : _a45.call(t, "handlePullResponse: cookie mismatch, pull response is not applicable"), { type: 2 };
    for (let [g, m] of Object.entries(o.lastMutationIDChanges)) {
      let S = c.lastMutationIDs[g];
      if (S !== void 0 && m < S)
        throw new Error(ar(`${g} lastMutationID`, m, S));
    }
    let p = E(o.cookie);
    if (Ae(p, d) < 0)
      throw new Error(ar("cookie", p, d));
    if (o.patch.length === 0 && W(p, d) && !tu(o.lastMutationIDChanges, c.lastMutationIDs))
      return { type: 1 };
    let f = await ws(u.chunk.hash, { ...c.lastMutationIDs, ...o.lastMutationIDChanges }, p, i, r, s);
    return await ir(t, f, o.patch), { type: 0, syncHead: await f.commit(Te) };
  });
}
function oi(t, e, n, o, r, s) {
  return he(t, async (i) => {
    var _a45;
    let a = i, l = await a.getHead(Te);
    if (l === void 0)
      throw new Error("Missing sync head");
    if (l !== n)
      throw (_a45 = e.error) == null ? void 0 : _a45.call(e, "maybeEndPull, Wrong sync head. Expecting:", n, "got:", l), new Error("Wrong sync head");
    let u = await $(l, a), c = await a.getHead(N);
    if (c === void 0)
      throw new Error("Missing main head");
    let d = await $(c, a), { meta: p } = u, f = p.basisHash;
    if (u === null)
      throw new Error("Sync snapshot with no basis");
    if (f !== d.chunk.hash)
      throw new Error("Overlapping syncs");
    let g = await O(l, a), m = [], S = await kn(c, a);
    for (let C of S) {
      let w = o;
      ve(C) && (w = C.meta.clientID), await C.getMutationID(w, a) > await g.getMutationID(w, a) && m.push(C);
    }
    m.reverse();
    let D = new He();
    if (m.length > 0)
      return { syncHead: l, replayMutations: m, diffs: D };
    let I = await O(c, a);
    if (r.shouldComputeDiffs()) {
      let C = new F(a, s, I.valueHash), w = new F(a, s, g.valueHash), P = await Ce(C, w);
      D.set("", P), await Ko(I, g, a, D, r, s);
    }
    if (await Promise.all([i.setHead(N, l), i.removeHead(Te)]), await i.commit(), e.debug) {
      let [C, w] = vn(d, o), [P, x] = vn(u, o);
      e.debug("Successfully pulled new snapshot with lastMutationID:", P, "(prev:", C, "), cookie: ", x, "(prev:", w, "), sync head hash:", l, ", main head hash:", c, ", valueHash:", g.valueHash, "(prev:", d.valueHash);
    }
    return { syncHead: l, replayMutations: [], diffs: D };
  });
}
function tu(t, e) {
  for (let [n, o] of Object.entries(t))
    if (o !== e[n])
      return true;
  return false;
}
var ur = [];
var cr = h.unknown().chain((t) => {
  if (j)
    return ok(t);
  let e = Yt(t, ur) ? ok(t) : err({ message: "Not a JSON value", path: ur.slice() });
  return ur.length = 0, e;
});
function ri(t) {
  M(t), lt(t.httpRequestInfo), t.response !== void 0 && nu(t.response);
}
function nu(t) {
  G(t) || Ar(t);
}
var Qe = class extends Error {
  constructor(e) {
    super("Failed to push");
    __publicField(this, "name", "PushError");
    __publicField(this, "causedBy");
    this.causedBy = e;
  }
};
var Bn = 0;
var et = 1;
var ou = Q({ id: h.number(), name: h.string(), args: cr, timestamp: h.number() });
var ru = Q({ id: h.number(), name: h.string(), args: cr, timestamp: h.number(), clientID: Bo });
var Fg = h.object({ pushVersion: h.literal(0), schemaVersion: h.string(), profileID: h.string(), clientID: Bo, mutations: h.array(ou) });
var Lg = h.object({ pushVersion: h.literal(1), schemaVersion: h.string(), profileID: h.string(), clientGroupID: Ot, mutations: h.array(ru) });
function su(t) {
  return { id: t.mutationID, name: t.mutatorName, args: t.mutatorArgsJSON, timestamp: t.timestamp };
}
function iu(t) {
  return { id: t.mutationID, name: t.mutatorName, args: t.mutatorArgsJSON, timestamp: t.timestamp, clientID: t.clientID };
}
async function Ut(t, e, n, o, r, s, i, a, l) {
  var _a45, _b2;
  let u = await H(e, async (f) => {
    let g = await f.getHead(N);
    if (!g)
      throw new Error("Internal no main head");
    return kn(g, f);
  });
  if (u.length === 0)
    return;
  u.reverse();
  let c;
  if (l === et) {
    let f = [];
    for (let m of u)
      if (ve(m))
        f.push(iu(m.meta));
      else
        throw new Error("Internal non local pending commit");
    y(r), c = { profileID: o, clientGroupID: r, mutations: f, pushVersion: et, schemaVersion: a };
  } else {
    y(l === Bn);
    let f = [];
    for (let g of u)
      if (To(g))
        f.push(su(g.meta));
      else
        throw new Error("Internal non local pending commit");
    c = { profileID: o, clientID: s, mutations: f, pushVersion: Bn, schemaVersion: a };
  }
  (_a45 = n.debug) == null ? void 0 : _a45.call(n, "Starting push...");
  let d = Date.now(), p = await au(i, c, t);
  return (_b2 = n.debug) == null ? void 0 : _b2.call(n, "...Push complete in ", Date.now() - d, "ms"), p;
}
async function au(t, e, n) {
  try {
    let o = await t(e, n);
    return ri(o), o;
  } catch (o) {
    throw new Qe(_n18(o));
  }
}
var ai = 10 * 2 ** 20;
var _e29, _t22, _a33;
var qn = (_a33 = class {
  constructor(e) {
    __privateAdd(this, _e29, false);
    __privateAdd(this, _t22, void 0);
    __privateSet(this, _t22, e);
  }
  async recoverMutations(e, n, o, r, s, i) {
    var _a45, _b2, _c6;
    let { lc: a, enableMutationRecovery: l, isPushDisabled: u, delegate: c } = __privateGet(this, _t22);
    if (!l || __privateGet(this, _e29) || !c.online || c.closed || u())
      return false;
    let d = "Recovering mutations.";
    (_a45 = a.debug) == null ? void 0 : _a45.call(a, "Start:", d);
    try {
      __privateSet(this, _e29, true), await n, await li(r, __privateGet(this, _t22), o, e);
      for (let p of Object.values(await s.getDatabases())) {
        if (c.closed)
          return (_b2 = a.debug) == null ? void 0 : _b2.call(a, "Exiting early due to close:", d), true;
        if (p.replicacheName === c.name && p.name !== c.idbName)
          switch (p.replicacheFormatVersion) {
            case 4:
            case 5:
            case 6:
            case 7:
              await uu(p, __privateGet(this, _t22), void 0, i);
          }
      }
    } catch (p) {
      _t23(p, a, d, c);
    } finally {
      (_c6 = a.debug) == null ? void 0 : _c6.call(a, "End:", d), __privateSet(this, _e29, false);
    }
    return true;
  }
}, _e29 = new WeakMap(), _t22 = new WeakMap(), _a33);
function _t23(t, e, n, o) {
  var _a45, _b2;
  o.closed ? (_a45 = e.debug) == null ? void 0 : _a45.call(e, `Mutation recovery error likely due to close during:
${n}
Error:
`, t) : (_b2 = e.error) == null ? void 0 : _b2.call(e, `Mutation recovery error during:
${n}
Error:
`, t);
}
async function lu(t, e, n, o, r, s) {
  var _a45, _b2, _c6, _d2, _e38, _f2, _g2, _h6, _i3;
  y(o.replicacheFormatVersion === 4), Wo(t);
  let { delegate: i, lc: a, wrapInOnlineCheck: l, wrapInReauthRetries: u, isPushDisabled: c, isPullDisabled: d } = r, p = i.clientID;
  if (p === e || t.lastServerAckdMutationID >= t.mutationID)
    return;
  let f = `Recovering mutations for ${e}.`;
  (_a45 = a.debug) == null ? void 0 : _a45.call(a, "Start:", f);
  let g = new Oe(n, ai, Io, B);
  try {
    if (await v(g, (x) => x.setHead(N, t.headHash)), c()) {
      (_b2 = a.debug) == null ? void 0 : _b2.call(a, `Cannot recover mutations for client ${e} because push is disabled.`);
      return;
    }
    let { pusher: m } = i, S = "recoveringMutationsPush";
    if (!await l(async () => {
      let { result: x } = await u(async (V, R) => {
        at(g);
        let b = await Ut(V, g, R, await i.profileID, void 0, e, m, o.schemaVersion, Bn);
        return { result: b, httpRequestInfo: b == null ? void 0 : b.httpRequestInfo };
      }, S, a);
      return !!x && x.httpRequestInfo.httpStatusCode === 200;
    }, S)) {
      (_c6 = a.debug) == null ? void 0 : _c6.call(a, `Failed to recover mutations for client ${e} due to a push error.`);
      return;
    }
    if (d()) {
      (_d2 = a.debug) == null ? void 0 : _d2.call(a, `Cannot confirm mutations were recovered for client ${e} because pull is disabled.`);
      return;
    }
    let { puller: I } = i, C = "recoveringMutationsPull", w;
    if (!await l(async () => {
      let { result: x } = await u(async (V, R) => {
        let b = await ti(await i.profileID, e, o.schemaVersion, I, V, g, s, R, false);
        return { result: b, httpRequestInfo: b.httpRequestInfo };
      }, C, a);
      return { pullResponse: w } = x, !!w && x.httpRequestInfo.httpStatusCode === 200;
    }, C)) {
      (_e38 = a.debug) == null ? void 0 : _e38.call(a, `Failed to recover mutations for client ${e} due to a pull error.`);
      return;
    }
    return a.debug && w && (G(w) ? (_f2 = a.debug) == null ? void 0 : _f2.call(a, `Client ${p} cannot recover mutations for client ${e}. The client no longer exists on the server.`) : K(w) ? (_g2 = a.debug) == null ? void 0 : _g2.call(a, `Version is not supported on the server. versionType: ${w.versionType}. Cannot recover mutations for client ${e}.`) : (_h6 = a.debug) == null ? void 0 : _h6.call(a, `Client ${p} recovered mutations for client ${e}.  Details`, { mutationID: t.mutationID, lastServerAckdMutationID: t.lastServerAckdMutationID, lastMutationID: w.lastMutationID })), await v(n, async (x) => {
      let V = await q(x), R = V.get(e);
      if (!R)
        return V;
      Wo(R);
      let b = async (J) => (await ye(J, x), J);
      if (G(w) || K(w)) {
        let J = new Map(V);
        return J.delete(e), b(J);
      }
      if (y(w), R.lastServerAckdMutationID >= w.lastMutationID)
        return V;
      let L = new Map(V).set(e, { ...R, lastServerAckdMutationID: w.lastMutationID });
      return b(L);
    });
  } catch (m) {
    _t23(m, a, f, i);
  } finally {
    await g.close(), (_i3 = a.debug) == null ? void 0 : _i3.call(a, "End:", f);
  }
}
async function uu(t, e, n, o) {
  let r = o(t.name), s = new Ie(r, z, B);
  try {
    await li(t, e, s, n);
  } finally {
    await s.close();
  }
}
function li(t, e, n, o) {
  return t.replicacheFormatVersion >= 5 ? pu(t, e, n) : cu(t, e, n, o);
}
async function cu(t, e, n, o) {
  var _a45, _b2, _c6;
  let { delegate: r, lc: s } = e, i = `Recovering mutations from db ${t.name}.`;
  (_a45 = s.debug) == null ? void 0 : _a45.call(s, "Start:", i);
  try {
    let a = bo(t.replicacheFormatVersion), l = o || await H(n, (c) => q(c)), u = /* @__PURE__ */ new Set();
    for (; l; ) {
      let c;
      for (let [d, p] of l) {
        if (r.closed) {
          (_b2 = s.debug) == null ? void 0 : _b2.call(s, "Exiting early due to close:", i);
          return;
        }
        if (!u.has(d) && (u.add(d), c = await lu(p, d, n, t, e, a), c))
          break;
      }
      l = c;
    }
  } catch (a) {
    _t23(a, s, i, r);
  }
  (_c6 = s.debug) == null ? void 0 : _c6.call(s, "End:", i);
}
async function pu(t, e, n) {
  var _a45, _b2, _c6;
  let { delegate: o, lc: r } = e, s = `Recovering mutations from db ${t.name}.`;
  (_a45 = r.debug) == null ? void 0 : _a45.call(r, "Start:", s);
  try {
    let i = bo(t.replicacheFormatVersion), a = await H(n, (u) => ee(u)), l = /* @__PURE__ */ new Set();
    for (; a; ) {
      let u;
      for (let [c, d] of a) {
        if (o.closed) {
          (_b2 = r.debug) == null ? void 0 : _b2.call(r, "Exiting early due to close:", s);
          return;
        }
        if (!l.has(c) && (l.add(c), u = await du(d, c, n, t, e, i), u))
          break;
      }
      a = u;
    }
  } catch (i) {
    _t23(i, r, s, o);
  }
  (_c6 = r.debug) == null ? void 0 : _c6.call(r, "End:", s);
}
function si(t) {
  return G(t) || K(t);
}
async function ii(t, e, n, o, r) {
  var _a45, _b2;
  G(o) ? (_a45 = t.debug) == null ? void 0 : _a45.call(t, `Client group ${e} cannot recover mutations for client group ${n}. The client group is unknown on the server. Marking it as disabled.`) : K(o) && ((_b2 = t.debug) == null ? void 0 : _b2.call(t, `Client group ${e} cannot recover mutations for client group ${n}. The client group's version is not supported on the server. versionType: ${o.versionType}. Marking it as disabled.`)), await v(r, (s) => dn(n, s));
}
async function du(t, e, n, o, r, s) {
  var _a45, _b2, _c6, _d2, _e38, _f2, _g2, _h6;
  y(o.replicacheFormatVersion >= 5);
  let { delegate: i, lc: a, wrapInOnlineCheck: l, wrapInReauthRetries: u, isPushDisabled: c, isPullDisabled: d } = r, p = await r.clientGroupIDPromise;
  if (at(p), p === e)
    return;
  let f, g = true;
  for (let [D, I] of Object.entries(t.mutationIDs))
    if (!t.lastServerAckdMutationIDs[D] || t.lastServerAckdMutationIDs[D] < I) {
      f = D, g = false;
      break;
    }
  if (g)
    return;
  if (t.disabled) {
    (_a45 = a.debug) == null ? void 0 : _a45.call(a, `Not recovering mutations for client group ${e} because group is disabled.`);
    return;
  }
  let m = `Recovering mutations for client group ${e}.`;
  (_b2 = a.debug) == null ? void 0 : _b2.call(a, "Start:", m);
  let S = new Oe(n, ai, Io, B);
  try {
    if (await v(S, (R) => R.setHead(N, t.headHash)), c()) {
      (_c6 = a.debug) == null ? void 0 : _c6.call(a, `Cannot recover mutations for client group ${e} because push is disabled.`);
      return;
    }
    let { pusher: D } = i, I = "recoveringMutationsPush";
    if (!await l(async () => {
      let { result: R } = await u(async (L, J) => {
        y(f), y(S);
        let oe = await Ut(L, S, J, await i.profileID, e, f, D, o.schemaVersion, et);
        return { result: oe, httpRequestInfo: oe == null ? void 0 : oe.httpRequestInfo };
      }, I, a);
      if (!R)
        return false;
      let b = R.response;
      return si(b) ? (await ii(a, p, e, b, n), false) : R.httpRequestInfo.httpStatusCode === 200;
    }, I)) {
      (_d2 = a.debug) == null ? void 0 : _d2.call(a, `Failed to recover mutations for client ${e} due to a push error.`);
      return;
    }
    if (d()) {
      (_e38 = a.debug) == null ? void 0 : _e38.call(a, `Cannot confirm mutations were recovered for client ${e} because pull is disabled.`);
      return;
    }
    let { puller: w } = i, P = "recoveringMutationsPull", x;
    if (!await l(async () => {
      let { result: R } = await u(async (L, J) => {
        y(f);
        let oe = await Kn(await i.profileID, f, e, o.schemaVersion, w, L, S, s, J, false);
        return { result: oe, httpRequestInfo: oe.httpRequestInfo };
      }, P, a), { pullResponse: b } = R;
      return si(b) ? (await ii(a, p, e, b, n), false) : !b || R.httpRequestInfo.httpStatusCode !== 200 ? false : (x = b, true);
    }, P)) {
      (_f2 = a.debug) == null ? void 0 : _f2.call(a, `Failed to recover mutations for client ${e} due to a pull error.`);
      return;
    }
    return y(x), (_g2 = a.debug) == null ? void 0 : _g2.call(a, `Client group ${p} recovered mutations for client group ${e}.  Details`, { mutationIDs: t.mutationIDs, lastServerAckdMutationIDs: t.lastServerAckdMutationIDs, lastMutationIDChanges: x.lastMutationIDChanges }), await v(n, async (R) => {
      var _a46;
      let b = await ee(R), L = b.get(e);
      if (!L)
        return b;
      y(x);
      let J = {}, oe = false;
      for (let [rt, De] of Object.entries(x.lastMutationIDChanges))
        ((_a46 = L.lastServerAckdMutationIDs[rt]) != null ? _a46 : 0) < De && (J[rt] = De, oe = true);
      if (!oe)
        return b;
      let ot = new Map(b).set(e, { ...L, lastServerAckdMutationIDs: { ...L.lastServerAckdMutationIDs, ...J } });
      return await cn(ot, R), ot;
    });
  } catch (D) {
    _t23(D, a, m, i);
  } finally {
    await S.close(), (_h6 = a.debug) == null ? void 0 : _h6.call(a, "End:", m);
  }
}
var pr = class {
  constructor(e) {
    __publicField(this, "name");
    __publicField(this, "onmessage", null);
    __publicField(this, "onmessageerror", null);
    this.name = e;
  }
  addEventListener() {
  }
  removeEventListener() {
  }
  dispatchEvent() {
    return false;
  }
  close() {
  }
  postMessage() {
  }
};
var Kt = typeof BroadcastChannel > "u" ? pr : BroadcastChannel;
function hu(t) {
  return `replicache-new-client-group:${t}`;
}
function mu(t) {
  return `replicache-new-client-group-v1:${t}`;
}
function fu(t) {
  return typeof t == "object" && typeof t.clientGroupID == "string" && typeof t.idbName == "string";
}
function ui(t, e, n, o, r, s, i) {
  if (n.aborted)
    return;
  let a = new Kt(mu(t));
  if (r) {
    a.postMessage({ clientGroupID: o, idbName: e });
    let l = new Kt(hu(t));
    l.postMessage([o]), l.close();
  }
  a.onmessage = async (l) => {
    let { data: u } = l;
    if (fu(u)) {
      let { clientGroupID: c, idbName: d } = u;
      if (c !== o)
        if (d === e)
          await H(i, async (f) => await Re(c, f) !== void 0) && s();
        else {
          s();
          return;
        }
    }
  }, n.addEventListener("abort", () => a.close());
}
function yu(t) {
  return `replicache-on-persist:${t}`;
}
function gu(t) {
  M(t), k(t.clientGroupID), k(t.clientID);
}
function ci(t, e, n) {
  if (e.aborted)
    return () => {
    };
  let o = new Kt(yu(t));
  return o.onmessage = (r) => {
    let { data: s } = r;
    gu(s), n({ clientGroupID: s.clientGroupID, clientID: s.clientID });
  }, e.addEventListener("abort", () => {
    o.close();
  }), (r) => {
    e.aborted || (o.postMessage(r), n(r));
  };
}
async function pi(t) {
  let e = await ze(N, t);
  return (await Pn(e, t)).map((o) => ({ id: o.meta.mutationID, name: o.meta.mutatorName, args: o.meta.mutatorArgsJSON, clientID: o.meta.clientID })).reverse();
}
var Du = 7 * 24 * 60 * 60 * 1e3;
var Su = 5 * 60 * 1e3;
var di;
function hi(t, e, n, o) {
  ie("ClientGC", () => (di = Iu(t, e), di), () => Su, n, o);
}
function Iu(t, e) {
  return v(e, async (n) => {
    let o = Date.now(), r = await q(n), s = Array.from(r).filter(([a, l]) => a === t || o - l.heartbeatTimestampMs <= Du);
    if (s.length === r.size)
      return r;
    let i = new Map(s);
    return await ye(i, n), i;
  });
}
var Cu = 5 * 60 * 1e3;
var mi;
function fi(t, e, n) {
  ie("ClientGroupGC", () => (mi = wu(t), mi), () => Cu, e, n);
}
function wu(t) {
  return v(t, async (e) => {
    let n = await q(e), o = /* @__PURE__ */ new Set();
    for (let s of n.values())
      $e(s), o.add(s.clientGroupID);
    let r = /* @__PURE__ */ new Map();
    for (let [s, i] of await ee(e))
      (o.has(s) || pn(i)) && r.set(s, i);
    return await cn(r, e), r;
  });
}
var xu = 60 * 1e3;
var yi;
function gi(t, e, n, o, r) {
  ie("Heartbeat", async () => {
    yi = bu(t, e);
    try {
      return await yi;
    } catch (s) {
      if (s instanceof Y) {
        n();
        return;
      }
      throw s;
    }
  }, () => xu, o, r);
}
function bu(t, e) {
  return v(e, async (n) => {
    let o = await q(n), r = o.get(t);
    if (!r)
      throw new Y(t);
    let s = { ...r, heartbeatTimestampMs: Date.now() }, i = new Map(o).set(t, s);
    return await ye(i, n), i;
  });
}
var _e30, _t24, _a34;
var tt = (_a34 = class {
  constructor(e) {
    __privateAdd(this, _e30, /* @__PURE__ */ new Set());
    __privateAdd(this, _t24, void 0);
    __privateSet(this, _t24, e);
  }
  async visit(e) {
    if (__privateGet(this, _e30).has(e))
      return;
    __privateGet(this, _e30).add(e);
    let n = await __privateGet(this, _t24).mustGetChunk(e);
    await this.visitChunk(n);
  }
  async visitChunk(e) {
    await Promise.all(e.meta.map((n) => this.visit(n)));
  }
}, _e30 = new WeakMap(), _t24 = new WeakMap(), _a34);
var _e31, _t25, _a35;
var Wn = (_a35 = class extends tt {
  constructor(e) {
    super(e);
    __privateAdd(this, _e31, /* @__PURE__ */ new Map());
    __privateAdd(this, _t25, void 0);
    __privateSet(this, _t25, e);
  }
  get gatheredChunks() {
    return __privateGet(this, _e31);
  }
  visit(e) {
    return __privateGet(this, _t25).isMemOnlyChunkHash(e) ? super.visit(e) : U;
  }
  visitChunk(e) {
    return __privateGet(this, _e31).set(e.hash, e), super.visitChunk(e);
  }
}, _e31 = new WeakMap(), _t25 = new WeakMap(), _a35);
async function Ii(t, e, n, o, r, s, i, a = () => Promise.resolve()) {
  if (s())
    return;
  let [l, u, c] = await H(o, async (m) => {
    await Ms(e, m);
    let S = await Xo(e, m);
    y(S, `No main client group for clientID: ${e}`);
    let [, D] = await Di(m, S), I = await D.getMutationID(e, m), C = await Ne(D, m);
    return le(C), [I, C, S];
  });
  if (s())
    return;
  let [d, p, f] = await H(n, async (m) => {
    let S = await Ke(N, m), D = await Mn(S, { [e]: l || 0 }, m), I = await Ne(S, m);
    le(I);
    let C;
    if (kt(I, u) > 0) {
      await a();
      let w = I.chunk.hash, P = new Wn(m);
      await P.visit(w), C = P.gatheredChunks;
    }
    return [D, I, C];
  });
  if (s())
    return;
  let g = false;
  await v(o, async (m) => {
    let [S, D] = await Di(m, c), I = D.chunk.hash, C = { ...S.mutationIDs }, { lastServerAckdMutationIDs: w } = S;
    if (f) {
      let x = await Et(e, m);
      $e(x);
      let V = await Ne(D, m);
      if (le(V), kt(p, V) > 0) {
        g = true, await Promise.all(Array.from(f.values(), (b) => m.putChunk(b))), await Tt(e, { ...x, persistHash: p.chunk.hash }, m), I = p.chunk.hash;
        let R = await Pn(S.headHash, m);
        w = p.meta.lastMutationIDs, C = { ...w }, I = await Si(R, I, m, r, C, t, i);
      }
    }
    I = await Si(d, I, m, r, C, t, i);
    let P = { ...S, headHash: I, mutationIDs: C, lastServerAckdMutationIDs: w };
    await Dt(c, P, m);
  }), f && g && await v(n, (m) => m.chunksPersisted([...f.keys()]));
}
async function Di(t, e) {
  let n = await Re(e, t);
  return y(n, `No client group for clientGroupID: ${e}`), [n, await O(n.headHash, t)];
}
async function Si(t, e, n, o, r, s, i) {
  for (let a = t.length - 1; a >= 0; a--) {
    let l = t[a], { meta: u } = l, c = await O(e, n);
    await l.getMutationID(u.clientID, n) > await c.getMutationID(u.clientID, n) && (r[u.clientID] = u.mutationID, e = (await Un(l, n, e, o, s, u.clientID, i)).chunk.hash);
  }
  return e;
}
var _e32, _t26, _n19, _o13, _r11, _a36;
var $n = (_a36 = class extends tt {
  constructor(e, n, o, r = fe) {
    super(e);
    __privateAdd(this, _e32, /* @__PURE__ */ new Map());
    __privateAdd(this, _t26, 0);
    __privateAdd(this, _n19, void 0);
    __privateAdd(this, _o13, void 0);
    __privateAdd(this, _r11, void 0);
    __privateSet(this, _n19, n), __privateSet(this, _o13, o), __privateSet(this, _r11, r);
  }
  get gatheredChunks() {
    return __privateGet(this, _e32);
  }
  visit(e) {
    return __privateGet(this, _t26) >= __privateGet(this, _o13) || __privateGet(this, _n19).isCached(e) ? U : super.visit(e);
  }
  visitChunk(e) {
    if (__privateGet(this, _t26) < __privateGet(this, _o13)) {
      let n = __privateGet(this, _r11).call(this, e);
      __privateGet(this, _e32).set(e.hash, { chunk: e, size: n }), __privateSet(this, _t26, __privateGet(this, _t26) + n);
    }
    return super.visitChunk(e);
  }
}, _e32 = new WeakMap(), _t26 = new WeakMap(), _n19 = new WeakMap(), _o13 = new WeakMap(), _r11 = new WeakMap(), _a36);
var Ru = 5 * 2 ** 20;
var ku = 300;
async function wi(t, e, n, o, r, s, i, a) {
  if (i())
    return;
  let l = await H(e, (d) => is(N, d));
  le(l);
  let u = await e.withSuspendedSourceCacheEvictsAndDeletes(async () => {
    let d = await v(n, async (D) => {
      let I = await Os(o, D);
      if (!I)
        throw new Y(o);
      let C = I.headHash, P = await (await O(C, D)).getMutationID(o, D), x = await Et(o, D);
      $e(x);
      let V = await $(C, D);
      if (le(V), Ci(l, V, C))
        return;
      let R = new $n(D, e, Ru);
      await R.visit(C);
      let { gatheredChunks: b } = R, L = new Set(x.refreshHashes);
      L.add(C);
      let J = { ...x, refreshHashes: [...L] };
      return await Tt(o, J, D), [C, V, P, b, x.refreshHashes];
    });
    if (i() || !d)
      return { type: "aborted" };
    if (await ce(ku), i())
      return { type: "aborted" };
    let [p, f, g, m, S] = d;
    return v(e, async (D) => {
      let I = await Ke(N, D), C = await Ne(I, D);
      if (le(C), Ci(C, f, p))
        return { type: "aborted", refreshHashesForRevert: S };
      let w = await Mn(I, { [o]: g }, D), P = [];
      for (let { chunk: b, size: L } of m.values())
        P.push(D.putChunk(b, L));
      await Promise.all(P);
      let x = p;
      for (let b = w.length - 1; b >= 0; b--)
        x = (await Un(w[b], D, x, r, t, w[b].meta.clientID, a)).chunk.hash;
      let V = await O(x, D), R = await Is(I, V, D, s, a);
      return await D.setHead(N, x), { type: "complete", newMemdagHeadHash: x, diffs: R, newPerdagClientHeadHash: p };
    });
  });
  if (i())
    return;
  let c = (d) => v(n, async (p) => {
    let g = { ...await Et(o, p), refreshHashes: d };
    await Tt(o, g, p);
  });
  if (u.type === "aborted") {
    u.refreshHashesForRevert && await c(u.refreshHashesForRevert);
    return;
  }
  return await c([u.newPerdagClientHeadHash]), [u.newMemdagHeadHash, u.diffs];
}
function Ci(t, e, n) {
  let o = kt(t, e);
  return o > 0 || o === 0 && n === e.chunk.hash;
}
function xi(t) {
  return new Promise((e) => {
    typeof requestIdleCallback == "function" ? requestIdleCallback(() => e(), { timeout: t }) : setTimeout(() => e(), t);
  });
}
var _e33, _t27, _n20, _o14, _r12, _s8, _a37, _l4, _c4, _h4, h_fn4, _a38;
var Bt = (_a38 = class {
  constructor(e, n, o, r, s = xi) {
    __privateAdd(this, _h4);
    __privateAdd(this, _e33, void 0);
    __privateAdd(this, _t27, void 0);
    __privateAdd(this, _n20, void 0);
    __privateAdd(this, _o14, void 0);
    __privateAdd(this, _r12, void 0);
    __privateAdd(this, _s8, void 0);
    __privateAdd(this, _a37, void 0);
    __privateAdd(this, _l4, Promise.resolve());
    __privateAdd(this, _c4, Promise.resolve());
    __privateSet(this, _e33, e), __privateSet(this, _t27, n), __privateSet(this, _n20, o), __privateSet(this, _o14, r), __privateSet(this, _r12, s), __privateGet(this, _o14).addEventListener("abort", () => {
      var _a45, _b2;
      let i = new Z("Aborted");
      (_a45 = __privateGet(this, _a37)) == null ? void 0 : _a45.reject(i), (_b2 = __privateGet(this, _s8)) == null ? void 0 : _b2.reject(i), __privateSet(this, _a37, void 0), __privateSet(this, _s8, void 0);
    });
  }
  schedule() {
    return __privateGet(this, _o14).aborted ? Promise.reject(new Z("Aborted")) : __privateGet(this, _s8) ? __privateGet(this, _s8).promise : (__privateSet(this, _s8, resolver()), __privateMethod(this, _h4, h_fn4).call(this), __privateGet(this, _s8).promise);
  }
}, _e33 = new WeakMap(), _t27 = new WeakMap(), _n20 = new WeakMap(), _o14 = new WeakMap(), _r12 = new WeakMap(), _s8 = new WeakMap(), _a37 = new WeakMap(), _l4 = new WeakMap(), _c4 = new WeakMap(), _h4 = new WeakSet(), h_fn4 = async function() {
  var _a45, _b2;
  try {
    await __privateGet(this, _l4);
  } catch (e) {
  }
  if (await __privateGet(this, _c4), !!__privateGet(this, _s8) && (await __privateGet(this, _r12).call(this, __privateGet(this, _t27)), !!__privateGet(this, _s8))) {
    __privateSet(this, _c4, Mu(__privateGet(this, _n20), __privateGet(this, _o14))), __privateSet(this, _a37, __privateGet(this, _s8)), __privateSet(this, _s8, void 0);
    try {
      __privateSet(this, _l4, __privateGet(this, _e33).call(this)), await __privateGet(this, _l4), (_a45 = __privateGet(this, _a37)) == null ? void 0 : _a45.resolve();
    } catch (e) {
      (_b2 = __privateGet(this, _a37)) == null ? void 0 : _b2.reject(e);
    }
    __privateSet(this, _a37, void 0);
  }
}, _a38);
async function Mu(t, e) {
  try {
    await ce(t, e);
  } catch (n) {
    y(n instanceof Z);
  }
}
function bi(t, e, n) {
  let o = setInterval(t, e);
  n.addEventListener("abort", () => {
    clearInterval(o);
  });
}
async function dr(t, e, n, o) {
  let r = await fetch(e, { method: t, body: n, headers: o });
  if (!r.ok)
    throw new Error(`Got ${r.status} fetching ${e}: ${await r.text()}`);
  return r;
}
var vu = /* @__PURE__ */ new Set();
var Ri = Symbol();
var _e34, _t28, _n21, _o15, _r13, _s9, _a39;
var hr = (_a39 = class {
  constructor(e, n, o, r, s = W) {
    __privateAdd(this, _e34, void 0);
    __privateAdd(this, _t28, void 0);
    __privateAdd(this, _n21, Ri);
    __privateAdd(this, _o15, vu);
    __privateAdd(this, _r13, []);
    __publicField(this, "onError");
    __publicField(this, "onDone");
    __privateAdd(this, _s9, void 0);
    __privateSet(this, _e34, e), __privateSet(this, _t28, n), this.onError = o, this.onDone = r, __privateSet(this, _s9, s);
  }
  hasIndexSubscription(e) {
    for (let n of __privateGet(this, _r13))
      if (n.options.indexName === e)
        return true;
    return false;
  }
  invoke(e, n, o) {
    return __privateGet(this, _e34).call(this, e);
  }
  matches(e) {
    for (let [n, o] of e)
      if (Nu(__privateGet(this, _o15), __privateGet(this, _r13), n, o))
        return true;
    return false;
  }
  updateDeps(e, n) {
    __privateSet(this, _o15, e), __privateSet(this, _r13, n);
  }
  onData(e) {
    (__privateGet(this, _n21) === Ri || !__privateGet(this, _s9).call(this, __privateGet(this, _n21), e)) && (__privateSet(this, _n21, e), __privateGet(this, _t28).call(this, e));
  }
}, _e34 = new WeakMap(), _t28 = new WeakMap(), _n21 = new WeakMap(), _o15 = new WeakMap(), _r13 = new WeakMap(), _s9 = new WeakMap(), _a39);
var _e35, _t29, _n22, _o16, _a40;
var mr = (_a40 = class {
  constructor(e, n) {
    __privateAdd(this, _e35, void 0);
    __privateAdd(this, _t29, void 0);
    __privateAdd(this, _n22, void 0);
    __privateAdd(this, _o16, void 0);
    __publicField(this, "onError");
    __publicField(this, "onDone");
    var _a45, _b2;
    __privateSet(this, _e35, e), __privateSet(this, _t29, (_a45 = n.prefix) != null ? _a45 : ""), __privateSet(this, _n22, n.indexName), __privateSet(this, _o16, (_b2 = n.initialValuesInFirstDiff) != null ? _b2 : false);
  }
  hasIndexSubscription(e) {
    return __privateGet(this, _n22) === e;
  }
  onData(e) {
    e !== void 0 && __privateGet(this, _e35).call(this, e);
  }
  invoke(e, n, o) {
    let r = async (s, i, a, l) => {
      var _a45;
      let u;
      if (n === 0) {
        if (!__privateGet(this, _o16))
          return;
        y(o === void 0);
        let p = [];
        for await (let f of e.scan({ prefix: i, indexName: s }).entries())
          p.push({ op: "add", key: f[0], newValue: f[1] });
        u = p;
      } else {
        y(o);
        let p = (_a45 = o.get(s != null ? s : "")) != null ? _a45 : [];
        u = l(p);
      }
      let c = [], { length: d } = u;
      for (let p = Mi(u, i, a); p < d && a(u[p]).startsWith(i); p++)
        c.push(u[p]);
      return n === 0 || c.length > 0 ? c : void 0;
    };
    return __privateGet(this, _n22) ? r(__privateGet(this, _n22), __privateGet(this, _t29), (s) => s.key[0], (s) => ki(s, qe)) : r(void 0, __privateGet(this, _t29), (s) => s.key, (s) => ki(s, (i) => i));
  }
  matches(e) {
    var _a45;
    let n = e.get((_a45 = __privateGet(this, _n22)) != null ? _a45 : "");
    return n === void 0 ? false : Eu(n, __privateGet(this, _t29), __privateGet(this, _n22));
  }
  updateDeps(e, n) {
  }
}, _e35 = new WeakMap(), _t29 = new WeakMap(), _n22 = new WeakMap(), _o16 = new WeakMap(), _a40);
function ki(t, e) {
  return t.map((n) => {
    let o = e(n.key);
    switch (n.op) {
      case "add":
        return { op: "add", key: o, newValue: n.newValue };
      case "change":
        return { op: "change", key: o, oldValue: n.oldValue, newValue: n.newValue };
      case "del":
        return { op: "del", key: o, oldValue: n.oldValue };
    }
  });
}
var _e36, _t30, _n23, _o17, _r14, r_fn4, _s10, s_fn4, _a41, a_fn2, _a42;
var Yn = (_a42 = class {
  constructor(e, n) {
    __privateAdd(this, _r14);
    __privateAdd(this, _s10);
    __privateAdd(this, _a41);
    __privateAdd(this, _e36, /* @__PURE__ */ new Set());
    __privateAdd(this, _t30, /* @__PURE__ */ new Set());
    __privateAdd(this, _n23, void 0);
    __privateAdd(this, _o17, void 0);
    __publicField(this, "hasPendingSubscriptionRuns", false);
    __privateSet(this, _n23, e), __privateSet(this, _o17, n);
  }
  addSubscription(e, { onData: n, onError: o, onDone: r, isEqual: s }) {
    let i = new hr(e, n, o, r, s);
    return __privateMethod(this, _r14, r_fn4).call(this, i);
  }
  addWatch(e, n) {
    let o = new mr(e, n != null ? n : {});
    return __privateMethod(this, _r14, r_fn4).call(this, o);
  }
  clear() {
    var _a45;
    for (let e of __privateGet(this, _e36))
      (_a45 = e.onDone) == null ? void 0 : _a45.call(e);
    __privateGet(this, _e36).clear();
  }
  async fire(e) {
    let n = Ou(__privateGet(this, _e36), e);
    await __privateMethod(this, _s10, s_fn4).call(this, n, 1, e);
  }
  shouldComputeDiffs() {
    return __privateGet(this, _e36).size > 0;
  }
  shouldComputeDiffsForIndex(e) {
    for (let n of __privateGet(this, _e36))
      if (n.hasIndexSubscription(e))
        return true;
    return false;
  }
}, _e36 = new WeakMap(), _t30 = new WeakMap(), _n23 = new WeakMap(), _o17 = new WeakMap(), _r14 = new WeakSet(), r_fn4 = function(e) {
  return __privateGet(this, _e36).add(e), __privateMethod(this, _a41, a_fn2).call(this, e), () => __privateGet(this, _e36).delete(e);
}, _s10 = new WeakSet(), s_fn4 = async function(e, n, o) {
  var _a45, _b2;
  let r = [...e];
  if (r.length === 0)
    return;
  let s = await __privateGet(this, _n23).call(this, (i) => Promise.allSettled(r.map(async (a) => {
    let l = new Gn(i);
    try {
      return await a.invoke(l, n, o);
    } finally {
      a.updateDeps(l.keys, l.scans);
    }
  })));
  for (let i = 0; i < r.length; i++) {
    let a = r[i], l = s[i];
    l.status === "fulfilled" ? a.onData(l.value) : a.onError ? a.onError(l.reason) : (_b2 = (_a45 = __privateGet(this, _o17)).error) == null ? void 0 : _b2.call(_a45, "Error in subscription body:", l.reason);
  }
}, _a41 = new WeakSet(), a_fn2 = async function(e) {
  if (__privateGet(this, _t30).add(e), !this.hasPendingSubscriptionRuns) {
    this.hasPendingSubscriptionRuns = true, await Promise.resolve(), this.hasPendingSubscriptionRuns = false;
    let n = [...__privateGet(this, _t30)];
    __privateGet(this, _t30).clear(), await __privateMethod(this, _s10, s_fn4).call(this, n, 0, void 0);
  }
}, _a42);
function Nu(t, e, n, o) {
  if (n === "") {
    for (let r of o)
      if (t.has(r.key))
        return true;
  }
  for (let r of e)
    if (Hu(r, n, o))
      return true;
  return false;
}
function Hu(t, e, n) {
  for (let o of n)
    if (Vu(t, e, o.key))
      return true;
  return false;
}
function Vu(t, e, n) {
  let { indexName: o = "", limit: r, prefix: s, startKey: i, startExclusive: a, startSecondaryKey: l } = t.options;
  if (e !== o)
    return false;
  if (!o)
    return r !== void 0 && r <= 0 ? false : !s && !i ? true : !(s && (!n.startsWith(s) || Pi(t, n)) || i && (a && mn(n, i) || hn(n, i) || Pi(t, n)));
  if (!s && !i && !l)
    return true;
  let [u, c] = qe(n);
  return !(s && !u.startsWith(s) || l && (a && mn(u, l) || hn(u, l)) || i && (a && mn(c, i) || hn(c, i)));
}
function Pi(t, e) {
  let { inclusiveLimitKey: n } = t;
  return t.options.limit !== void 0 && n !== void 0 && Pe(e, n);
}
function* Ou(t, e) {
  for (let n of t)
    n.matches(e) && (yield n);
}
function Eu(t, e, n) {
  if (e === "")
    return true;
  let o = n ? (s) => qe(s.key)[0] : (s) => s.key, r = Mi(t, e, o);
  return r < t.length && o(t[r]).startsWith(e);
}
function Mi(t, e, n) {
  return fn(t.length, (o) => ke(e, n(t[o])));
}
var fr = "";
function Tu() {
  if (fr === "") {
    let t = new Uint8Array(4);
    crypto.getRandomValues(t), fr = Array.from(t, (e) => e.toString(16)).join("");
  }
  return fr;
}
var yr = /* @__PURE__ */ new Map();
function gr(t) {
  let e = yr.get(t);
  return e ? (e++, yr.set(t, e)) : (yr.set(t, 0), e = 0), `${t}-${Tu()}-${e}`;
}
var Dr = "14.2.2";
var ju = 401;
var zu = 100 * 2 ** 20;
var Ju = 5 * 60 * 1e3;
var Gu = 24 * 60 * 60 * 1e3;
var Uu = 5 * 60 * 1e3;
function Hi(t, e) {
  return _u4(t, e, 7);
}
function _u4(t, e, n) {
  let o = `rep:${t}:${n}`;
  return e ? `${o}:${e}` : o;
}
var Ku = 8;
var Bu = 1e3;
var qu = 1e3;
var Wu = 500;
var $u = 500;
var Xn = () => {
};
var Yu = { type: "NewClientGroup" };
var _e37, _t31, _n24, _o18, _r15, _s11, s_get, _a43, _l5, _c5, _h5, _u5, _S2, _f, _ee, _te, _x, _I, _T, _A, _b, _C, _F, _m, _p2, _d, _y, _i2, _g, _R, _L, _j, _z, _ne, _J, _oe, _k, _re, re_fn, _G, _U, U_fn, _se, se_fn, _P, P_fn, _ie, ie_fn, _M, M_fn, __, __fn, _ae, ae_fn, _K, K_fn, _v, v_fn, _N, N_fn, _B, B_fn, _le, le_fn, _H, H_fn, _ue, ue_fn, _q, q_fn, _W, W_fn, _$, $_fn, _w, w_fn, _V, V_fn, _Y, Y_fn, _X, X_fn, _ce, ce_fn, _pe, pe_fn, _Z, Z_fn, _D, D_fn, _Q, _de, de_fn, _he, he_fn, _me, me_fn, _O, O_fn, _E, E_fn, _a44;
var Ir = (_a44 = class {
  constructor(e) {
    __privateAdd(this, _s11);
    __privateAdd(this, _re);
    __privateAdd(this, _U);
    __privateAdd(this, _se);
    __privateAdd(this, _P);
    __privateAdd(this, _ie);
    __privateAdd(this, _M);
    __privateAdd(this, __);
    __privateAdd(this, _ae);
    __privateAdd(this, _K);
    __privateAdd(this, _v);
    __privateAdd(this, _N);
    __privateAdd(this, _B);
    __privateAdd(this, _le);
    __privateAdd(this, _H);
    __privateAdd(this, _ue);
    __privateAdd(this, _q);
    __privateAdd(this, _W);
    __privateAdd(this, _$);
    __privateAdd(this, _w);
    __privateAdd(this, _V);
    __privateAdd(this, _Y);
    __privateAdd(this, _X);
    __privateAdd(this, _ce);
    __privateAdd(this, _pe);
    __privateAdd(this, _Z);
    __privateAdd(this, _D);
    __privateAdd(this, _de);
    __privateAdd(this, _he);
    __privateAdd(this, _me);
    __privateAdd(this, _O);
    __privateAdd(this, _E);
    __publicField(this, "pullURL");
    __publicField(this, "pushURL");
    __publicField(this, "auth");
    __publicField(this, "name");
    __privateAdd(this, _e37, void 0);
    __privateAdd(this, _t31, void 0);
    __privateAdd(this, _n24, false);
    __privateAdd(this, _o18, void 0);
    __privateAdd(this, _r15, 0);
    __publicField(this, "schemaVersion");
    __privateAdd(this, _a43, false);
    __privateAdd(this, _l5, true);
    __privateAdd(this, _c5, pe());
    __privateAdd(this, _h5, void 0);
    __privateAdd(this, _u5, void 0);
    __privateAdd(this, _S2, void 0);
    __privateAdd(this, _f, void 0);
    __privateAdd(this, _ee, void 0);
    __privateAdd(this, _te, void 0);
    __privateAdd(this, _x, null);
    __privateAdd(this, _I, {});
    __publicField(this, "mutate");
    __privateAdd(this, _T, 0);
    __privateAdd(this, _A, 0);
    __privateAdd(this, _b, void 0);
    __privateAdd(this, _C, void 0);
    __publicField(this, "pullInterval");
    __publicField(this, "pushDelay");
    __privateAdd(this, _F, void 0);
    __publicField(this, "puller");
    __publicField(this, "pusher");
    __privateAdd(this, _m, void 0);
    __privateAdd(this, _p2, void 0);
    __privateAdd(this, _d, void 0);
    __privateAdd(this, _y, void 0);
    __privateAdd(this, _i2, void 0);
    __privateAdd(this, _g, new AbortController());
    __privateAdd(this, _R, false);
    __privateAdd(this, _L, void 0);
    __privateAdd(this, _j, void 0);
    __privateAdd(this, _z, void 0);
    __privateAdd(this, _ne, new Bt(() => __privateMethod(this, _q, q_fn).call(this), Bu, Wu, __privateGet(this, _g).signal));
    __privateAdd(this, _J, void 0);
    __privateAdd(this, _oe, new Bt(() => __privateMethod(this, _W, W_fn).call(this), qu, $u, __privateGet(this, _g).signal));
    __privateAdd(this, _k, void 0);
    __publicField(this, "onSync", null);
    __publicField(this, "onClientStateNotFound", vi);
    __publicField(this, "onUpdateNeeded", vi);
    __publicField(this, "getAuth", null);
    __privateAdd(this, _G, async () => {
      var _a45;
      __privateGet(this, _a43) || ((_a45 = At()) == null ? void 0 : _a45.visibilityState) === "visible" && await __privateMethod(this, _U, U_fn).call(this);
    });
    __publicField(this, "onOnlineChange", null);
    __privateAdd(this, _Q, async (e) => {
      await __privateGet(this, _u5);
      let { clientID: n } = this;
      return H(__privateGet(this, _p2), async (o) => {
        try {
          let r = await Ss(o, 7), s = new Jt(n, r, __privateGet(this, _i2));
          return await e(s);
        } catch (r) {
          throw await __privateMethod(this, _O, O_fn).call(this, r);
        }
      });
    });
    var _a45, _b2, _c6, _d2, _e38, _f2, _g2;
    let { name: n, logLevel: o = "info", logSinks: r = [consoleLogSink], pullURL: s = "", auth: i, pushDelay: a = 10, pushURL: l = "", schemaVersion: u = "", pullInterval: c = 6e4, mutators: d = {}, requestOptions: p = {}, puller: f, pusher: g, licenseKey: m, experimentalCreateKVStore: S, indexes: D = {} } = e;
    if (this.auth = i != null ? i : "", this.pullURL = s, this.pushURL = l, typeof n != "string" || !n)
      throw new TypeError("name is required and must be non-empty");
    this.name = n, this.schemaVersion = u, this.pullInterval = c, this.pushDelay = a, this.puller = f != null ? f : lo(this), this.pusher = g != null ? g : Xs(this);
    let I = e, C = (_a45 = I.enableMutationRecovery) != null ? _a45 : true;
    __privateSet(this, _k, (_b2 = I.enableLicensing) != null ? _b2 : true), __privateSet(this, _L, (_c6 = I.enableScheduledPersist) != null ? _c6 : true), __privateSet(this, _j, (_d2 = I.enableScheduledRefresh) != null ? _d2 : true), __privateSet(this, _z, (_e38 = I.enablePullAndPushInOpen) != null ? _e38 : true), I.exposeInternalAPI && I.exposeInternalAPI({ persist: () => __privateMethod(this, _q, q_fn).call(this), refresh: () => __privateMethod(this, _W, W_fn).call(this), lastMutationID: () => __privateGet(this, _r15) });
    let w = r.length === 1 ? r[0] : new TeeLogSink(r);
    __privateSet(this, _i2, new LogContext(o, { name: n }, w)), (_g2 = (_f2 = __privateGet(this, _i2)).debug) == null ? void 0 : _g2.call(_f2, "Constructing Replicache", { name: n, "replicache version": Dr }), __privateSet(this, _e37, new Yn(__privateGet(this, _Q), __privateGet(this, _i2)));
    let P = (De) => gt(__privateGet(this, _i2), De), x;
    S ? (P = S, x = P(this.idbName)) : x = P(this.idbName), __privateSet(this, _o18, P), __privateSet(this, _y, new Ve(P)), __privateSet(this, _d, new Ie(x, z, B)), __privateSet(this, _p2, new Oe(__privateGet(this, _d), zu, z, B));
    let V = resolver();
    __privateSet(this, _u5, V.promise), __privateSet(this, _m, m);
    let R = resolver();
    __privateSet(this, _ee, R.promise);
    let b = resolver();
    __privateSet(this, _te, b.promise);
    let { minDelayMs: L = Us, maxDelayMs: J = _s5 } = p;
    __privateSet(this, _F, { maxDelayMs: J, minDelayMs: L });
    let oe = Js(At(), 0, __privateGet(this, _g).signal);
    __privateSet(this, _b, new Ft(__privateGet(this, _i2).withContext("PULL"), new jn(this, () => __privateMethod(this, _ae, ae_fn).call(this)), oe)), __privateSet(this, _C, new Ft(__privateGet(this, _i2).withContext("PUSH"), new zn(this, () => __privateMethod(this, _le, le_fn).call(this)))), this.mutate = __privateMethod(this, _he, he_fn).call(this, d);
    let ot = resolver();
    __privateSet(this, _S2, ot.promise);
    let rt = resolver();
    __privateSet(this, _f, rt.promise), __privateSet(this, _t31, new qn({ delegate: this, lc: __privateGet(this, _i2), enableMutationRecovery: C, wrapInOnlineCheck: __privateMethod(this, _v, v_fn).bind(this), wrapInReauthRetries: __privateMethod(this, _N, N_fn).bind(this), isPullDisabled: __privateMethod(this, _K, K_fn).bind(this), isPushDisabled: __privateMethod(this, _B, B_fn).bind(this), clientGroupIDPromise: __privateGet(this, _f) })), __privateSet(this, _J, ci(this.name, __privateGet(this, _g).signal, (De) => {
      __privateMethod(this, _ce, ce_fn).call(this, De);
    })), __privateMethod(this, _re, re_fn).call(this, D, ot.resolve, rt.resolve, V.resolve, R.resolve, b.resolve);
  }
  get idbName() {
    return Hi(this.name, this.schemaVersion);
  }
  get requestOptions() {
    return __privateGet(this, _F);
  }
  get profileID() {
    return __privateGet(this, _S2);
  }
  get clientID() {
    return __privateGet(this, _c5);
  }
  get clientGroupID() {
    return __privateGet(this, _f);
  }
  get online() {
    return __privateGet(this, _l5);
  }
  get closed() {
    return __privateGet(this, _a43);
  }
  async close() {
    var _a45;
    __privateSet(this, _a43, true);
    let { promise: e, resolve: n } = resolver();
    Sr.set(this.name, e), __privateGet(this, _g).abort(), (_a45 = At()) == null ? void 0 : _a45.removeEventListener("visibilitychange", __privateGet(this, _G)), await __privateGet(this, _u5);
    let o = [__privateGet(this, _p2).close(), __privateGet(this, _d).close(), __privateGet(this, _y).close()];
    __privateGet(this, _b).close(), __privateGet(this, _C).close(), __privateGet(this, _e37).clear(), __privateGet(this, _x) && clearTimeout(__privateGet(this, _x)), await Promise.all(o), Sr.delete(this.name), n();
  }
  push({ now: e = false } = {}) {
    return Ni(__privateGet(this, _C).send(e));
  }
  pull({ now: e = false } = {}) {
    return Ni(__privateGet(this, _b).send(e));
  }
  async poke(e) {
    await __privateGet(this, _u5);
    let { clientID: n } = this, o = gr(n), r = __privateGet(this, _i2).withContext("handlePullResponse").withContext("requestID", o), { pullResponse: s } = e;
    if (K(s)) {
      __privateMethod(this, _H, H_fn).call(this, s);
      return;
    }
    if (G(s)) {
      await __privateMethod(this, _V, V_fn).call(this);
      return;
    }
    let i = await lr(r, __privateGet(this, _p2), E(e.baseCookie), s, n, 7);
    switch (i.type) {
      case 0:
        await __privateMethod(this, __, __fn).call(this, i.syncHead, o);
        break;
      case 2:
        throw new Error("unexpected base cookie for poke: " + JSON.stringify(e));
      case 1:
        break;
    }
  }
  subscribe(e, n) {
    return typeof n == "function" && (n = { onData: n }), __privateGet(this, _e37).addSubscription(e, n);
  }
  experimentalWatch(e, n) {
    return __privateGet(this, _e37).addWatch(e, n);
  }
  query(e) {
    return __privateGet(this, _Q).call(this, e);
  }
  experimentalPendingMutations() {
    return H(__privateGet(this, _p2), pi);
  }
}, _e37 = new WeakMap(), _t31 = new WeakMap(), _n24 = new WeakMap(), _o18 = new WeakMap(), _r15 = new WeakMap(), _s11 = new WeakSet(), s_get = function() {
  return { name: this.idbName, replicacheName: this.name, replicacheFormatVersion: 7, schemaVersion: this.schemaVersion };
}, _a43 = new WeakMap(), _l5 = new WeakMap(), _c5 = new WeakMap(), _h5 = new WeakMap(), _u5 = new WeakMap(), _S2 = new WeakMap(), _f = new WeakMap(), _ee = new WeakMap(), _te = new WeakMap(), _x = new WeakMap(), _I = new WeakMap(), _T = new WeakMap(), _A = new WeakMap(), _b = new WeakMap(), _C = new WeakMap(), _F = new WeakMap(), _m = new WeakMap(), _p2 = new WeakMap(), _d = new WeakMap(), _y = new WeakMap(), _i2 = new WeakMap(), _g = new WeakMap(), _R = new WeakMap(), _L = new WeakMap(), _j = new WeakMap(), _z = new WeakMap(), _ne = new WeakMap(), _J = new WeakMap(), _oe = new WeakMap(), _k = new WeakMap(), _re = new WeakSet(), re_fn = async function(e, n, o, r, s, i) {
  var _a45;
  let { clientID: a } = this;
  await Sr.get(this.name), await __privateGet(this, _y).getProfileID().then(n), await __privateGet(this, _y).putDatabase(__privateGet(this, _s11, s_get));
  let [l, u, c, d] = await vs(a, __privateGet(this, _i2), __privateGet(this, _d), Object.keys(__privateGet(this, _I)), e, 7);
  o(l.clientGroupID), await v(__privateGet(this, _p2), (f) => f.setHead(N, u)), __privateSet(this, _h5, await Ys(__privateGet(this, _p2), N)), r(), await __privateMethod(this, _se, se_fn).call(this, s), __privateGet(this, _z) && (this.pull().catch(Xn), this.push().catch(Xn));
  let { signal: p } = __privateGet(this, _g);
  gi(a, __privateGet(this, _d), () => {
    __privateMethod(this, _w, w_fn).call(this, a);
  }, __privateGet(this, _i2), p), hi(a, __privateGet(this, _d), __privateGet(this, _i2), p), Fs(__privateGet(this, _y), __privateGet(this, _i2), p), fi(__privateGet(this, _d), __privateGet(this, _i2), p), ui(this.name, this.idbName, p, l.clientGroupID, d, () => {
    __privateMethod(this, _Y, Y_fn).call(this, Yu);
  }, __privateGet(this, _d)), bi(() => __privateMethod(this, _E, E_fn).call(this), Ju, p), __privateMethod(this, _E, E_fn).call(this, c), (_a45 = At()) == null ? void 0 : _a45.addEventListener("visibilitychange", __privateGet(this, _G)), await __privateMethod(this, _ie, ie_fn).call(this, i, __privateGet(this, _i2), p);
}, _G = new WeakMap(), _U = new WeakSet(), U_fn = async function() {
  let { clientID: e } = this, n = await H(__privateGet(this, _d), (o) => $o(e, o));
  return n || __privateMethod(this, _w, w_fn).call(this, e), !n;
}, _se = new WeakSet(), se_fn = async function(e) {
  var _a45, _b2, _c6, _d2, _e38, _f2, _g2, _h6, _i3, _j2;
  if (!__privateGet(this, _k)) {
    e(true);
    return;
  }
  if (!__privateGet(this, _m)) {
    await __privateMethod(this, _P, P_fn).call(this, __privateGet(this, _i2), "license key ReplicacheOptions.licenseKey is not set", true, e);
    return;
  }
  if ((_b2 = (_a45 = __privateGet(this, _i2)).debug) == null ? void 0 : _b2.call(_a45, `Replicache license key: ${__privateGet(this, _m)}`), __privateGet(this, _m) === it) {
    (_d2 = (_c6 = __privateGet(this, _i2)).info) == null ? void 0 : _d2.call(_c6, "Skipping license check for TEST_LICENSE_KEY. You may ONLY use this key for automated (e.g., unit/CI) testing. See https://replicache.dev for more information."), e(true), __privateSet(this, _x, setTimeout(async () => {
      await __privateMethod(this, _P, P_fn).call(this, __privateGet(this, _i2), "Test key expired", true, e);
    }, Uu));
    return;
  }
  try {
    let n = await ro(dr, Wt, __privateGet(this, _m), __privateGet(this, _i2));
    if (n.pleaseUpdate && ((_f2 = (_e38 = __privateGet(this, _i2)).error) == null ? void 0 : _f2.call(_e38, "You are using an old version of Replicache that uses deprecated licensing features. Please update Replicache else it may stop working.")), n.status === "VALID")
      (_h6 = (_g2 = __privateGet(this, _i2)).debug) == null ? void 0 : _h6.call(_g2, "License is valid.");
    else {
      await __privateMethod(this, _P, P_fn).call(this, __privateGet(this, _i2), `status: ${n.status}`, n.disable, e);
      return;
    }
  } catch (n) {
    (_j2 = (_i3 = __privateGet(this, _i2)).error) == null ? void 0 : _j2.call(_i3, `Error checking license: ${n}`);
  }
  e(true);
}, _P = new WeakSet(), P_fn = async function(e, n, o, r) {
  var _a45, _b2;
  (_a45 = e.error) == null ? void 0 : _a45.call(e, `** REPLICACHE LICENSE NOT VALID ** Replicache license key '${__privateGet(this, _m)}' is not valid (${n}). Please run 'npx replicache get-license' to get a license key or contact hello@replicache.dev for help.`), o && (await this.close(), (_b2 = e.error) == null ? void 0 : _b2.call(e, "** REPLICACHE DISABLED **")), r(false);
}, _ie = new WeakSet(), ie_fn = async function(e, n, o) {
  if (!__privateGet(this, _k) || !__privateGet(this, _m) || __privateGet(this, _m) === it) {
    e(false);
    return;
  }
  let r = async () => {
    var _a45, _b2;
    try {
      await oo(dr, Wt, __privateGet(this, _m), await this.profileID, n);
    } catch (s) {
      (_b2 = (_a45 = __privateGet(this, _i2)).info) == null ? void 0 : _b2.call(_a45, `Error sending license active ping: ${s}`);
    }
  };
  await r(), e(true), ie("LicenseActive", r, () => Gu, n, o);
}, _M = new WeakSet(), M_fn = async function(e, n) {
  let o = __privateGet(this, _h5);
  at(o), e !== o && (__privateSet(this, _h5, e), await __privateGet(this, _e37).fire(n));
}, __ = new WeakSet(), __fn = async function(e, n) {
  for (; ; ) {
    if (__privateGet(this, _a43))
      return;
    await __privateGet(this, _u5);
    let { clientID: o } = this, r = __privateGet(this, _i2).withContext("maybeEndPull").withContext("requestID", n), { replayMutations: s, diffs: i } = await oi(__privateGet(this, _p2), r, e, o, __privateGet(this, _e37), 7);
    if (!s || s.length === 0) {
      await __privateMethod(this, _M, M_fn).call(this, e, i), __privateMethod(this, _X, X_fn).call(this);
      return;
    }
    for (let a of s) {
      __privateGet(this, _e37).hasPendingSubscriptionRuns && await Promise.resolve();
      let { meta: l } = a;
      e = await he(__privateGet(this, _p2), (u) => $s(a, u, e, Te, __privateGet(this, _I), r, Be(l) ? l.clientID : o, 7));
    }
  }
}, _ae = new WeakSet(), ae_fn = function() {
  return __privateMethod(this, _K, K_fn).call(this) ? Promise.resolve(true) : __privateMethod(this, _v, v_fn).call(this, async () => {
    try {
      __privateMethod(this, _D, D_fn).call(this, 0, 1);
      let { syncHead: e, requestID: n, ok: o } = await __privateMethod(this, _ue, ue_fn).call(this);
      if (!o)
        return false;
      e !== T && await __privateMethod(this, __, __fn).call(this, e, n);
    } catch (e) {
      throw await __privateMethod(this, _O, O_fn).call(this, e);
    } finally {
      __privateMethod(this, _D, D_fn).call(this, 0, -1);
    }
    return true;
  }, "Pull");
}, _K = new WeakSet(), K_fn = function() {
  return __privateGet(this, _n24) || this.pullURL === "" && Lr(this.puller);
}, _v = new WeakSet(), v_fn = async function(e, n) {
  var _a45, _b2, _c6, _d2, _e38, _f2, _g2;
  let o = true;
  try {
    return await e();
  } catch (r) {
    return r instanceof Qe || r instanceof Ee ? (o = false, (_b2 = (_a45 = __privateGet(this, _i2)).debug) == null ? void 0 : _b2.call(_a45, `${n} threw:
`, r, `
with cause:
`, r.causedBy)) : r instanceof Cr ? (_d2 = (_c6 = __privateGet(this, _i2)).error) == null ? void 0 : _d2.call(_c6, r) : (_f2 = (_e38 = __privateGet(this, _i2)).info) == null ? void 0 : _f2.call(_e38, `${n} threw:
`, r), false;
  } finally {
    __privateGet(this, _l5) !== o && (__privateSet(this, _l5, o), (_g2 = this.onOnlineChange) == null ? void 0 : _g2.call(this, o), o && __privateMethod(this, _E, E_fn).call(this));
  }
}, _N = new WeakSet(), N_fn = async function(e, n, o, r = Xn, s = Xn) {
  var _a45, _b2;
  let { clientID: i } = this, a = 0, l;
  o = o.withContext(n);
  do {
    let u = gr(i), c = o.withContext("requestID", u), { httpRequestInfo: d, result: p } = await e(u, c);
    if (l = p, !d)
      return { result: p, authFailure: false };
    let { errorMessage: f, httpStatusCode: g } = d;
    if ((f || g >= 400) && ((_a45 = c.error) == null ? void 0 : _a45.call(c, `Got error response doing ${n}: ${g}` + (f ? `: ${f}` : ""))), g !== ju)
      return { result: p, authFailure: false };
    if (!this.getAuth)
      return { result: p, authFailure: true };
    let m;
    try {
      await r(), m = await this.getAuth();
    } finally {
      await s();
    }
    if (m == null)
      return { result: p, authFailure: true };
    this.auth = m, a++;
  } while (a < Ku);
  return (_b2 = o.info) == null ? void 0 : _b2.call(o, "Tried to reauthenticate too many times"), { result: l, authFailure: true };
}, _B = new WeakSet(), B_fn = function() {
  return __privateGet(this, _n24) || this.pushURL === "" && Qs(this.pusher);
}, _le = new WeakSet(), le_fn = async function() {
  if (__privateMethod(this, _B, B_fn).call(this))
    return true;
  await __privateGet(this, _u5);
  let e = await __privateGet(this, _S2), { clientID: n } = this, o = await __privateGet(this, _f);
  return __privateMethod(this, _v, v_fn).call(this, async () => {
    let { result: r } = await __privateMethod(this, _N, N_fn).call(this, async (a, l) => {
      try {
        __privateMethod(this, _D, D_fn).call(this, 1, 0);
        let u = await Ut(a, __privateGet(this, _p2), l, e, o, n, this.pusher, this.schemaVersion, et);
        return { result: u, httpRequestInfo: u == null ? void 0 : u.httpRequestInfo };
      } finally {
        __privateMethod(this, _D, D_fn).call(this, -1, 0);
      }
    }, "push", __privateGet(this, _i2));
    if (r === void 0)
      return true;
    let { response: s, httpRequestInfo: i } = r;
    return K(s) ? __privateMethod(this, _H, H_fn).call(this, s) : G(s) && await __privateMethod(this, _V, V_fn).call(this), i.httpStatusCode === 200;
  }, "Push");
}, _H = new WeakSet(), H_fn = function(e) {
  let n = { type: e.error };
  e.versionType && (n.versionType = e.versionType), __privateMethod(this, _Y, Y_fn).call(this, n);
}, _ue = new WeakSet(), ue_fn = async function() {
  await __privateGet(this, _u5);
  let e = await this.profileID, { clientID: n } = this, o = await __privateGet(this, _f), { result: { beginPullResponse: r, requestID: s } } = await __privateMethod(this, _N, N_fn).call(this, async (u, c) => {
    let d = await Kn(e, n, o, this.schemaVersion, this.puller, u, __privateGet(this, _p2), 7, c);
    return { result: { beginPullResponse: d, requestID: u }, httpRequestInfo: d.httpRequestInfo };
  }, "pull", __privateGet(this, _i2), () => __privateMethod(this, _D, D_fn).call(this, 0, -1), () => __privateMethod(this, _D, D_fn).call(this, 0, 1)), { pullResponse: i } = r;
  K(i) ? __privateMethod(this, _H, H_fn).call(this, i) : G(r.pullResponse) && await __privateMethod(this, _V, V_fn).call(this);
  let { syncHead: a, httpRequestInfo: l } = r;
  return { requestID: s, syncHead: a, ok: l.httpStatusCode === 200 };
}, _q = new WeakSet(), q_fn = async function() {
  var _a45, _b2;
  y(!__privateGet(this, _R)), __privateSet(this, _R, true);
  try {
    let { clientID: o } = this;
    if (await __privateGet(this, _u5), __privateGet(this, _a43))
      return;
    try {
      await Ii(__privateGet(this, _i2), o, __privateGet(this, _p2), __privateGet(this, _d), __privateGet(this, _I), () => this.closed, 7);
    } catch (r) {
      if (r instanceof Y)
        __privateMethod(this, _w, w_fn).call(this, o);
      else if (__privateGet(this, _a43))
        (_b2 = (_a45 = __privateGet(this, _i2)).debug) == null ? void 0 : _b2.call(_a45, "Exception persisting during close", r);
      else
        throw r;
    }
  } finally {
    __privateSet(this, _R, false);
  }
  let { clientID: e } = this, n = await __privateGet(this, _f);
  y(n), __privateGet(this, _J).call(this, { clientID: e, clientGroupID: n });
}, _W = new WeakSet(), W_fn = async function() {
  var _a45, _b2;
  await __privateGet(this, _u5);
  let { clientID: e } = this;
  if (__privateGet(this, _a43))
    return;
  let n;
  try {
    n = await wi(__privateGet(this, _i2), __privateGet(this, _p2), __privateGet(this, _d), e, __privateGet(this, _I), __privateGet(this, _e37), () => this.closed, 7);
  } catch (o) {
    if (o instanceof Y)
      __privateMethod(this, _w, w_fn).call(this, e);
    else if (__privateGet(this, _a43))
      (_b2 = (_a45 = __privateGet(this, _i2)).debug) == null ? void 0 : _b2.call(_a45, "Exception refreshing during close", o);
    else
      throw o;
  }
  n !== void 0 && await __privateMethod(this, _M, M_fn).call(this, n[0], n[1]);
}, _$ = new WeakSet(), $_fn = function() {
  var _a45;
  (_a45 = this.onClientStateNotFound) == null ? void 0 : _a45.call(this);
}, _w = new WeakSet(), w_fn = function(e) {
  var _a45, _b2;
  (_b2 = (_a45 = __privateGet(this, _i2)).error) == null ? void 0 : _b2.call(_a45, `Client state not found on client, clientID: ${e}`), __privateMethod(this, _$, $_fn).call(this);
}, _V = new WeakSet(), V_fn = async function() {
  var _a45, _b2;
  let e = await __privateGet(this, _f);
  y(e), __privateSet(this, _n24, true), await v(__privateGet(this, _d), (n) => dn(e, n)), (_b2 = (_a45 = __privateGet(this, _i2)).error) == null ? void 0 : _b2.call(_a45, `Client state not found on server, clientGroupID: ${e}`), __privateMethod(this, _$, $_fn).call(this);
}, _Y = new WeakSet(), Y_fn = function(e) {
  var _a45, _b2, _c6;
  (_b2 = (_a45 = __privateGet(this, _i2)).debug) == null ? void 0 : _b2.call(_a45, `Update needed, reason: ${e}`), (_c6 = this.onUpdateNeeded) == null ? void 0 : _c6.call(this, e);
}, _X = new WeakSet(), X_fn = async function() {
  __privateGet(this, _L) && await __privateMethod(this, _Z, Z_fn).call(this, "persist", __privateGet(this, _ne));
}, _ce = new WeakSet(), ce_fn = async function(e) {
  var _a45, _b2;
  (_b2 = (_a45 = __privateGet(this, _i2)).debug) == null ? void 0 : _b2.call(_a45, "Handling persist", e);
  let n = await __privateGet(this, _f);
  e.clientGroupID === n && __privateMethod(this, _pe, pe_fn).call(this);
}, _pe = new WeakSet(), pe_fn = async function() {
  __privateGet(this, _j) && await __privateMethod(this, _Z, Z_fn).call(this, "refresh from storage", __privateGet(this, _oe));
}, _Z = new WeakSet(), Z_fn = async function(e, n) {
  var _a45, _b2, _c6, _d2;
  try {
    await n.schedule();
  } catch (o) {
    o instanceof Z ? (_b2 = (_a45 = __privateGet(this, _i2)).debug) == null ? void 0 : _b2.call(_a45, `Scheduled ${e} did not complete before close.`) : (_d2 = (_c6 = __privateGet(this, _i2)).error) == null ? void 0 : _d2.call(_c6, `Error during ${e}`, o);
  }
}, _D = new WeakSet(), D_fn = function(e, n) {
  __privateSet(this, _T, __privateGet(this, _T) + e), __privateSet(this, _A, __privateGet(this, _A) + n);
  let o = e + n, r = __privateGet(this, _T) + __privateGet(this, _A);
  if (o === 1 && r === 1 || r === 0) {
    let s = r > 0;
    Promise.resolve().then(() => {
      var _a45;
      return (_a45 = this.onSync) == null ? void 0 : _a45.call(this, s);
    });
  }
}, _Q = new WeakMap(), _de = new WeakSet(), de_fn = function(e, n) {
  return __privateGet(this, _I)[e] = n, async (o) => (await __privateMethod(this, _me, me_fn).call(this, e, n, o, performance.now())).result;
}, _he = new WeakSet(), he_fn = function(e) {
  let n = /* @__PURE__ */ Object.create(null);
  for (let o in e)
    n[o] = __privateMethod(this, _de, de_fn).call(this, o, e[o]);
  return n;
}, _me = new WeakSet(), me_fn = async function(e, n, o, r) {
  let s = E(o != null ? o : null);
  __privateGet(this, _e37).hasPendingSubscriptionRuns && await Promise.resolve(), await __privateGet(this, _u5);
  let { clientID: i } = this;
  return he(__privateGet(this, _p2), async (a) => {
    try {
      let l = await ze(N, a), c = await Tn(l, e, s, null, a, r, i, 7), d = new Ze(i, await c.getMutationID(), "initial", c, __privateGet(this, _i2)), p = await n(d, o);
      xe(c);
      let f = await c.getMutationID(), [g, m] = await c.commitWithDiffs(N, __privateGet(this, _e37));
      return __privateSet(this, _r15, f), __privateGet(this, _C).send(false), await __privateMethod(this, _M, M_fn).call(this, g, m), __privateMethod(this, _X, X_fn).call(this), { result: p, ref: g };
    } catch (l) {
      throw await __privateMethod(this, _O, O_fn).call(this, l);
    }
  });
}, _O = new WeakSet(), O_fn = async function(e) {
  return e instanceof yt && await __privateMethod(this, _U, U_fn).call(this) ? new Y(this.clientID) : e;
}, _E = new WeakSet(), E_fn = function(e) {
  return __privateGet(this, _t31).recoverMutations(e, __privateGet(this, _u5), __privateGet(this, _d), __privateGet(this, _s11, s_get), __privateGet(this, _y), __privateGet(this, _o18));
}, _a44);
var Sr = /* @__PURE__ */ new Map();
function vi() {
  typeof location < "u" && location.reload();
}
var Cr = class extends Error {
};
async function Ni(t) {
  let e = await t;
  if (e)
    throw e.error;
}

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    let tick = 0;
    setInterval(() => tick++, 1e3);
    const rep = process ? new Ir({
      name: "replicache baybee",
      licenseKey: it,
      pushURL: "/api/replicache-push",
      pullURL: "/api/replicache-pull"
    }) : null;
    const ribbonIconEl = this.addRibbonIcon(
      "dice",
      "Sample Plugin",
      (evt) => {
        new import_obsidian.Notice("This is a notice!");
      }
    );
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "zigzag",
      name: "zigzag",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection(rep == null ? void 0 : rep.name);
      }
    });
    const testPatch = {
      // We will discuss these two fields in later steps.
      lastMutationIDChanges: {},
      cookie: 42,
      patch: [
        { op: "clear" },
        {
          op: "put",
          key: "message/qpdgkvpb9ao",
          value: {
            from: "Jane",
            content: "Hey, what's for lunch?",
            order: 1
          }
        },
        {
          op: "put",
          key: "message/5ahljadc408",
          value: {
            from: "Fred",
            content: "tacos?",
            order: 2
          }
        }
      ]
    };
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText(
      (text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
        this.plugin.settings.mySetting = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
